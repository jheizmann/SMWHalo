Index: extensions/SemanticMediaWiki/includes/SMW_DV_WikiPage.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DV_WikiPage.php	(revision 6646)
+++ extensions/SemanticMediaWiki/includes/SMW_DV_WikiPage.php	(working copy)
@@ -113,6 +113,7 @@
 		$this->m_namespace = array_key_exists(1,$args)?$args[1]:$this->m_fixNamespace;
 		$this->m_interwiki = array_key_exists(2,$args)?$args[2]:'';
 		$this->m_sortkey   = array_key_exists(3,$args)?$args[3]:'';
+		$this->m_fragment   = array_key_exists(4,$args)?$args[4]:'';
 		$this->m_textform = str_replace('_', ' ', $this->m_dbkeyform);
 		$this->m_id = false;
 		$this->m_title = NULL;
@@ -154,6 +155,7 @@
 	 * In all other uses, values come from the store and do not have fragments anyway.
 	 */
 	public function getLongWikiText($linked = NULL) {
+		
 		$this->unstub();
 		if (!$this->isValid()) {
 			return $this->getErrorText();
@@ -163,11 +165,27 @@
 		} elseif ($this->m_namespace == NS_IMAGE) { // embed images instead of linking to their page
 			 return '[[' . str_replace("'", '&#x0027;', $this->getPrefixedText()) . '|' . $this->m_textform . '|frameless|border|text-top]]';
 		} else { // this takes care of all other cases, esp. it is right for Media:
-			return '[[:' . str_replace("'", '&#x0027;', $this->getPrefixedText()) . '|' . $this->m_textform . ']]';
-		}
+            if ( $this->m_fragment != NULL) {
+                if (strpos($this->m_fragment, "##") === false) {
+                    // only fragment set
+                    $fragment = $this->m_fragment;  
+                    $label = $this->m_textform;
+                } else {
+                    // fragment set with alternative label encoded
+                    list($label, $fragment) = explode("##",$this->m_fragment);
+                }
+            } else {
+                // no fragment at all set
+             $label = $this->m_textform;
+             $fragment = "";
+            }
+            $fragment = str_replace("'", '&#x0027;', $fragment);
+            return '[[:' . str_replace("'", '&#x0027;', $this->getPrefixedText()) . ($this->m_fragment != NULL ? "#".$fragment : "") . '|' . $label  . ']]';
+        }
 	}
 
 	public function getLongHTMLText($linker = NULL) {
+		
 		$this->unstub();
 		if ( ($linker !== NULL) && ($this->m_outformat != '-') ) { $this->getTitle(); } // init the Title object, may reveal hitherto unnoticed errors
 		if (!$this->isValid()) {
@@ -367,8 +385,8 @@
 	/**
 	 * @deprecated Use setDBkeys()
 	 */
-	public function setValues($dbkey, $namespace, $id = false, $interwiki = '', $sortkey = '') {
-		$this->setDBkeys(array($dbkey,$namespace,$interwiki,$sortkey));
+	public function setValues($dbkey, $namespace, $id = false, $interwiki = '', $sortkey = '', $fragment = '') {
+		$this->setDBkeys(array($dbkey,$namespace,$interwiki,$sortkey, $fragment));
 	}
 
 }
Index: extensions/SemanticMediaWiki/includes/SMW_DataValue.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DataValue.php	(revision 6546)
+++ extensions/SemanticMediaWiki/includes/SMW_DataValue.php	(working copy)
@@ -55,7 +55,15 @@
 
 	private $m_hasssearchlink;        /// used to control the addition of the standard search link
 	private $m_hasservicelinks;       /// used to control service link creation
-
+    private $m_provenance = NULL;
+    
+    public function setProvenance($provURI) {
+       $this->m_provenance = $provURI;
+    }
+   
+    public function getProvenance() {
+       return $this->m_provenance;
+    }
 
 	public function __construct($typeid) {
 		$this->m_typeid = $typeid;
Index: extensions/SemanticMediaWiki/skins/SMW_sorttable.js
===================================================================
--- extensions/SemanticMediaWiki/skins/SMW_sorttable.js	(revision 6546)
+++ extensions/SemanticMediaWiki/skins/SMW_sorttable.js	(working copy)
@@ -85,9 +85,9 @@
 	for (var i=0;i<spans.length;i++) {
 	    if(spans[i].className=="smwsortkey") return spans[i].innerHTML;
 	}
-    }else{
-	return el.innerHTML;	
     }
+	return el.innerHTML;	
+    
 
 }
 
Index: includes/Article.php
===================================================================
--- includes/Article.php	(revision 6546)
+++ includes/Article.php	(working copy)
@@ -3552,9 +3552,15 @@
 
 		$popts = $wgOut->parserOptions();
 		$popts->setTidy(true);
+		/*op-patch|TS|2009-06-19|SMWHalo|Parsing context|start*/
+        $popts->setParsingContext("Main article");
+		/*op-patch|TS|2009-06-19|end*/
 		$popts->enableLimitReport();
-		$parserOutput = $wgParser->parse( $text, $this->mTitle,
-			$popts, true, true, $this->getRevIdFetched() );
+		$parserOutput = $wgParser->parse($text, $this->mTitle,
+                                        $popts, true, true, $this->getRevIdFetched() );
+		/*op-patch|TS|2009-06-19|SMWHalo|Parsing context|start*/
+       $popts->setParsingContext("");
+		/*op-patch|TS|2009-06-19|end*/
 		$popts->setTidy(false);
 		$popts->enableLimitReport( false );
 		if( $wgEnableParserCache && $cache && $this && $parserOutput->getCacheTime() != -1 ) {
Index: includes/Namespace.php
===================================================================
--- includes/Namespace.php	(revision 6546)
+++ includes/Namespace.php	(working copy)
@@ -53,7 +53,11 @@
 	 */
 	public static function isMovable( $index ) {
 		global $wgAllowImageMoving;
-		return !( $index < NS_MAIN || ($index == NS_FILE && !$wgAllowImageMoving)  || $index == NS_CATEGORY );
+		/*op-patch|BL|2009-07-13|RichMedia|DoNotAllowCategoryMoving|start*/
+		// content was:
+		// return !( $index < NS_MAIN || ($index == NS_IMAGE && !$wgAllowImageMoving)  || $index == NS_CATEGORY );
+		return !( $index < NS_MAIN || ($index == NS_IMAGE && !$wgAllowImageMoving) /*|| $index == NS_CATEGORY*/ );
+		/*op-patch|BL|2009-07-13|end*/
 	}
 
 	/**
Index: includes/parser/ParserOptions.php
===================================================================
--- includes/parser/ParserOptions.php	(revision 6546)
+++ includes/parser/ParserOptions.php	(working copy)
@@ -30,6 +30,9 @@
 	var $mTemplateCallback;          # Callback for template fetching
 	var $mEnableLimitReport;         # Enable limit report in an HTML comment on output
 	var $mTimestamp;                 # Timestamp used for {{CURRENTDAY}} etc.
+	/*op-patch|TS|2009-06-19|SMWHalo|Parsing context|start*/
+    var $mParsingContext;           # Reason/context why the parser has been invoked
+	/*op-patch|TS|2009-06-19|end*/
 	var $mExternalLinkTarget;        # Target attribute for external links
 
 	var $mUser;                      # Stored user object, just used to initialise the skin
@@ -60,7 +63,11 @@
 	function getIsPreview()                     { return $this->mIsPreview; }
 	function getIsSectionPreview()              { return $this->mIsSectionPreview; }
   function getIsPrintable()            { return $this->mIsPrintable; }
-  
+  	
+  /*op-patch|TS|2009-06-19|SMWHalo|Parsing context|start*/
+   function getParsingContext()                { return $this->mParsingContext; }
+  /*op-patch|TS|2009-06-19|end*/
+   
 	function getSkin() {
 		if ( !isset( $this->mSkin ) ) {
 			$this->mSkin = $this->mUser->getSkin();
@@ -108,7 +115,11 @@
 	function setIsPreview( $x )                 { return wfSetVar( $this->mIsPreview, $x ); }
 	function setIsSectionPreview( $x )          { return wfSetVar( $this->mIsSectionPreview, $x ); }
   function setIsPrintable( $x )        { return wfSetVar( $this->mIsPrintable, $x ); }
-  
+  	
+    /*op-patch|TS|2009-06-19|SMWHalo|Parsing context|start*/
+    function setParsingContext($pc)             { return wfSetVar( $this->mParsingContext, $pc); }
+	/*op-patch|TS|2009-06-19|end*/
+   
 	function __construct( $user = null ) {
 		$this->initialiseFromUser( $user );
 	}
