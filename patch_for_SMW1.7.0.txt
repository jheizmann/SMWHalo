Index: extensions/SemanticMediaWiki/includes/SMW_DataValueFactory.php
===================================================================
--- extensions/SemanticMediaWiki/includes/SMW_DataValueFactory.php	(revision 13492)
+++ extensions/SemanticMediaWiki/includes/SMW_DataValueFactory.php	(working copy)
@@ -75,6 +75,8 @@
 		//SMWDataItem::TYPE_NOTYPE => '',
 		//SMWDataItem::TYPE_ERROR => '',
 	);
+	
+	static private $mNewDataItemIds = array();
 
 	/**
 	 * Create a value from a type id. If no $value is given, an empty
@@ -126,8 +128,12 @@
 	 * @return SMWDataValue
 	 */
 	static public function newDataItemValue( SMWDataItem $dataItem, $property, $caption = false ) {
-		if ( !is_null( $property ) ) {
-			$typeId = $property->findPropertyTypeID();
+/*op-patch|Kai|2012-02-08|SMWHalo|supporting external URIs for data integration|start*/
+ 		if (array_key_exists($dataItem->getDiType(), self::$mNewDataItemIds)) {
+ 			$typeId = self::$mNewDataItemIds[$dataItem->getDiType()];
+ 		} else if ( !is_null( $property ) ) {
+/*op-patch|Kai|2012-02-08|SMWHalo|supporting external URIs for data integration|end*/
+ 			$typeId = $property->findPropertyTypeID();
 		} else {
 			$typeId = self::$mDefaultDataItemTypeIds[$dataItem->getDiType()];
 		}
@@ -282,7 +288,8 @@
 	static public function registerDatatype( $id, $className, $dataItemId, $label = false ) {
 		self::$mTypeClasses[$id] = $className;
 		self::$mTypeDataItemIds[$id] = $dataItemId;
-
+        self::$mNewDataItemIds[$dataItemId] = $id;
+        
 		if ( $label != false ) {
 			self::$mTypeLabels[$id] = $label;
 		}
Index: extensions/SemanticMediaWiki/includes/dataitems/SMW_DataItem.php
===================================================================
--- extensions/SemanticMediaWiki/includes/dataitems/SMW_DataItem.php	(revision 12164)
+++ extensions/SemanticMediaWiki/includes/dataitems/SMW_DataItem.php	(working copy)
@@ -42,8 +42,29 @@
  * @ingroup SMWDataItems
  */
 abstract class SMWDataItem {
+    
+	/// Patch:KK|Metadata data|Start
+    private $m_metadata = array();
+    private $m_metadataTypes = array();
+
+    public function setMetadata($mdProperty, $mdType, $mdValue) {
+        $this->m_metadata[$mdProperty] = $mdValue;
+        $this->m_metadataTypes[$mdProperty] = $mdType;
+    }
 
-	/// Data item ID that can be used to indicate that no data item class is appropriate
+    public function getMetadata($mdProperty) {
+        return array_key_exists($mdProperty, $this->m_metadata) ? $this->m_metadata[$mdProperty] : '';
+    }
+
+    public function getMetadataType($mdProperty) {
+        return array_key_exists($mdProperty, $this->m_metadataTypes) ? $this->m_metadataTypes[$mdProperty] : '';
+    }
+
+    public function getMetadataMap() {
+        return $this->m_metadata;
+    }
+    /// Patch:KK|Metadata data|End
+	// Data item ID that can be used to indicate that no data item class is appropriate
 	const TYPE_NOTYPE    = 0;
 	/// Data item ID for SMWDINumber
 	const TYPE_NUMBER    = 1;
