<?php
/**
 * @file
 * @ingroup SMWHaloSemanticStorage
 *
 * Created on 17.04.2007
 * Author: kai
 *
 * Database access class (mainly) for OntologyBrowser.
 */
if ( !defined( 'MEDIAWIKI' ) ) die;

global $smwgIP,$smwgHaloIP;
require_once( "$smwgIP/includes/storage/SMW_Store.php" );
require_once( "$smwgIP/includes/datavalues/SMW_DV_WikiPage.php" );
require_once( "$smwgIP/includes/SMW_DataValueFactory.php" );
require_once  "$smwgHaloIP/includes/SMW_DBHelper.php";
require_once( "SMW_SemanticStore.php");
require_once( "SMW_OntologyManipulator.php");



abstract class SMWSemanticStoreSQL extends SMWSemanticStore {

	public function SMWSemanticStoreSQL() {
		parent::SMWSemanticStore();
	}

	/**
	 * Checks if $title is a redirect page.
	 *
	 * @param $title
	 * @param $pagetable Name of MW's 'page' table (for efficiency)
	 * @param & $db reference for database (for efficiency)
	 */
	private static function isRedirect(Title $title, $pagetable, & $db) {
		return $db->selectRow($pagetable, 'page_is_redirect', array('page_title' => $title->getDBkey(), 'page_namespace' => $title->getNamespace(), 'page_is_redirect' => 1)) !== false;
	}

	function setup($verbose) {
		DBHelper::reportProgress("Setting up smwhalo storage ...\n",$verbose);
		$this->createPreDefinedPages($verbose);
		DBHelper::reportProgress(" ... done!\n",$verbose);
		return true;
	}

	/**
	 * Checks if the extension is correctly installed.
	 *
	 *  (1) Checks existance of database tables
	 *  (2) Checks if certain pages with special Halo semantics exist
	 *
	 *  FIXME: i18n the messages.
	 *
	 * @param (out) array $messages
	 */
	function isInitialized(& $messages) {
		$db =& wfGetDB( DB_SLAVE );


		$pagesExist = true;
		if (!SMWHaloPredefinedPages::$HAS_DOMAIN_AND_RANGE->exists()) {
			$pagesExist = false;
			$messages[] = SMWHaloPredefinedPages::$HAS_DOMAIN_AND_RANGE->getPrefixedText()." does not exist!\n";
		}
		if (!SMWHaloPredefinedPages::$HAS_MAX_CARDINALITY->exists()) {
			$pagesExist = false;
			$messages[] = SMWHaloPredefinedPages::$HAS_MAX_CARDINALITY->getPrefixedText()." does not exist!\n";
		}
		if (!SMWHaloPredefinedPages::$HAS_MIN_CARDINALITY->exists()) {
			$pagesExist = false;
			$messages[] = SMWHaloPredefinedPages::$HAS_MIN_CARDINALITY->getPrefixedText()." does not exist!\n";
		}
		if (!SMWHaloPredefinedPages::$TRANSITIVE_PROPERTY->exists()) {
			$pagesExist = false;
			$messages[] = SMWHaloPredefinedPages::$TRANSITIVE_PROPERTY->getPrefixedText()." does not exist!\n";
		}
		if (!SMWHaloPredefinedPages::$SYMMETRICAL_PROPERTY->exists()) {
			$pagesExist = false;
			$messages[] = SMWHaloPredefinedPages::$SYMMETRICAL_PROPERTY->getPrefixedText()." does not exist!\n";
		}
		if (!SMWHaloPredefinedPages::$IS_INVERSE_OF->exists()) {
			$pagesExist = false;
			$messages[] = SMWHaloPredefinedPages::$IS_INVERSE_OF->getPrefixedText()." does not exist!\n";
		}
		if (!SMWHaloPredefinedPages::$ONTOLOGY_URI->exists()) {
			$pagesExist = false;
			$messages[] = SMWHaloPredefinedPages::$ONTOLOGY_URI->getPrefixedText()." does not exist!\n";
		}

		// FIXME: ignore help attributes
		return $pagesExist;
	}

	function drop($verbose) {

		DBHelper::reportProgress("Deleting all database content and tables generated by SMWHalo ...\n\n",$verbose);
		$this->removePredefinedProperties();
		DBHelper::reportProgress("All data removed successfully.\n",$verbose);
		return true;
	}

	public function getPages($namespaces = NULL, $requestoptions = NULL, $addRedirectTargets = false, $bundleID = '') {
		$result = "";
		$db =& wfGetDB( DB_SLAVE );
		$sql = "";
		$addedNS = 0;
		if ($namespaces != NULL) {
			$sql .= '(';
			for ($i = 0, $n = count($namespaces); $i < $n; $i++) {
				if ($i > 0) $sql .= ' OR ';
				if ($namespaces[$i] >= 0) {
					$sql .= 'page_namespace='.$db->addQuotes($namespaces[$i]);
					$addedNS++;
				}
			}
			if ($addedNS == 0) $sql .= 'true';
			$sql .= ') ';
		} else  {
			$sql = 'true';
		}

		$sql .= " AND ";
		$addedNS = 0;
		if ($namespaces != NULL) {
			$sql .= '(';
			for ($i = 0, $n = count($namespaces); $i < $n; $i++) {
				if ($i > 0) $sql .= ' AND ';
				if ($namespaces[$i] < 0) {
					$sql .= 'page_namespace!='.$db->addQuotes(-$namespaces[$i]);
					$addedNS++;
				}
			}
			if ($addedNS == 0) $sql .= 'true';
			$sql .= ') ';
		} else  {
			$sql = 'true';
		}

		$sql .= DBHelper::getSQLConditions($requestoptions,'page_title','page_title');

		$result = array();

		global $dfgLang;
		$partOfBundlePropertyID = smwfGetStore()->getSMWPropertyID(SMWDIProperty::newFromUserLabel($dfgLang->getLanguageString("df_partofbundle")));
		//$partOfBundleID = smwfGetStore()->getSMWPageID($ext_id, NS_MAIN, "");
		$bundleID = str_replace(" ","_",ucfirst($bundleID));
		$bundleSMWID = smwfGetStore()->getSMWPageID($bundleID, NS_MAIN, "", "");
		$smw_ids = $db->tableName('smw_ids');
		$smw_rels2 = $db->tableName('smw_rels2');
		$page = $db->tableName('page');
		$redirect = $db->tableName('redirect');
		$bundleSql = empty($bundleID) ? '' : ' AND page_id IN (SELECT pc.page_id  FROM '.$page.' pc JOIN '.$smw_ids.' ON pc.page_title = smw_title JOIN '.$smw_rels2.' ON s_id = smw_id AND p_id = '.$partOfBundlePropertyID.' AND o_id = '.$bundleSMWID.')';


		if (!$addRedirectTargets) {
			$res = $db->select( $db->tableName('page'),
			array('page_title','page_namespace'),
			$sql.'  AND page_is_redirect = 0 '.$bundleSql, 'SMW::getPages', DBHelper::getSQLOptions($requestoptions,'page_namespace') );
			if($db->numRows( $res ) > 0) {
				while($row = $db->fetchObject($res)) {
					if (smwf_om_userCan($row->page_title, 'read', $row->page_namespace) === "true") {
						$result[] = Title::newFromText($row->page_title, $row->page_namespace);
					}
				}
			}
		} else {


			$res = $db->query( '(SELECT page_title AS title, page_namespace AS ns FROM '.$page.' WHERE '.$sql.' AND page_is_redirect = 0 '.$bundleSql.') ' .
		   					'UNION DISTINCT ' .
		   					  '(SELECT rd_title AS title, rd_namespace AS ns FROM '.$page.' JOIN '.$redirect.' ON page_id = rd_from WHERE '.$sql.' AND page_is_redirect = 1 '.$bundleSql.')  '.
			DBHelper::getSQLOptionsAsString($requestoptions,'ns'));
			if($db->numRows( $res ) > 0) {
				while($row = $db->fetchObject($res)) {
					if (smwf_om_userCan($row->title, 'read', $row->ns) === "true") {
						$result[] = Title::newFromText($row->title, $row->ns);
					}
				}
			}
		}


		$db->freeResult($res);
		return $result;
	}



	function getRootCategories($requestoptions = NULL, $bundleID = '') {
		$result = array();
		$db =& wfGetDB( DB_SLAVE );
		global $dfgLang;
		$partOfBundlePropertyID = smwfGetStore()->getSMWPropertyID(SMWDIProperty::newFromUserLabel($dfgLang->getLanguageString("df_partofbundle")));
		//$partOfBundleID = smwfGetStore()->getSMWPageID($ext_id, NS_MAIN, "");
		$bundleID = str_replace(" ","_",ucfirst($bundleID));
		$bundleSMWID = smwfGetStore()->getSMWPageID($bundleID, NS_MAIN, "", "");
		$smw_ids = $db->tableName('smw_ids');
		$smw_rels2 = $db->tableName('smw_rels2');



		$categorylinks = $db->tableName('categorylinks');
		$page = $db->tableName('page');

		// get root categories with
		$sql = 'page_namespace=' . NS_CATEGORY .
               ' AND page_is_redirect = 0 AND NOT EXISTS (SELECT cl_from FROM '.$categorylinks.' WHERE cl_from = page_id) AND NOT EXISTS (SELECT c.cl_from FROM '.$categorylinks.' c JOIN '.$page.' p ON p.page_id = c.cl_from WHERE c.cl_to = t.page_title AND p.page_namespace='.NS_CATEGORY.')';

		// and those without subcategories
		$sql2 = 'page_namespace=' . NS_CATEGORY .
               ' AND page_is_redirect = 0 AND NOT EXISTS (SELECT cl_from FROM '.$categorylinks.' WHERE cl_from = page_id) AND EXISTS (SELECT c.cl_from FROM '.$categorylinks.' c JOIN '.$page.' p ON p.page_id = c.cl_from WHERE c.cl_to = t.page_title AND p.page_namespace='.NS_CATEGORY.')';

		// get all categories which exist only implicitly as a supercategory of another.
		$sql3 = 'ON c.cl_to = p.page_title JOIN '.$page.' p2 ON c.cl_from = p2.page_id AND p2.page_namespace = '.NS_CATEGORY.' WHERE p.page_id IS NULL';

		// set of categories of a bundle
		$bundleSql1 = $bundleSql2 = $bundleSql3 = $noRootCategoryBundles = '';
		if (!empty($bundleID)) {
			$bundleSql = ' (SELECT pc.page_id pc FROM '.$page.' pc JOIN '.$smw_ids.' ON pc.page_title = smw_title AND pc.page_namespace = '.NS_CATEGORY.' JOIN '.$smw_rels2.' ON s_id = smw_id AND p_id = '.$partOfBundlePropertyID.' AND o_id = '.$bundleSMWID.')';
			$bundleSql1 = 'AND page_id IN '.$bundleSql;
			$bundleSql2 = 'AND page_id IN '.$bundleSql;
			$bundleSql3 = 'AND c.cl_to IN '.$bundleSql;

			$noRootCategoryBundles = ' UNION DISTINCT (SELECT subcat.page_title, "false" AS has_subcategories FROM '.$page.' subcat '.
                                 'JOIN '.$categorylinks.' c ON c.cl_from = subcat.page_id '.
                                 'JOIN '.$page.' supercat ON c.cl_to = supercat.page_title AND supercat.page_namespace = '.NS_CATEGORY.' '.
                                 'WHERE subcat.page_id IN '.$bundleSql.' AND supercat.page_id NOT IN '.$bundleSql.' '.
                                 'AND NOT EXISTS (SELECT c.cl_from FROM '.$categorylinks.' c JOIN '.$page.' p ON p.page_id = c.cl_from '.
                                 'WHERE c.cl_to = subcat.page_title AND p.page_namespace='.NS_CATEGORY.')) '.
                        ' UNION DISTINCT (SELECT subcat.page_title, "true" AS has_subcategories FROM '.$page.' subcat '.
                                'JOIN '.$categorylinks.' c ON c.cl_from = subcat.page_id '.
                                'JOIN '.$page.' supercat ON c.cl_to = supercat.page_title AND supercat.page_namespace = '.NS_CATEGORY.' '.
                                'WHERE subcat.page_id IN '.$bundleSql.' AND supercat.page_id NOT IN '.$bundleSql.' '.
                                'AND EXISTS (SELECT c.cl_from FROM '.$categorylinks.' c JOIN '.$page.' p ON p.page_id = c.cl_from '.
                                'WHERE c.cl_to = subcat.page_title AND p.page_namespace='.NS_CATEGORY.')) ';
		}

		$res = $db->query('(SELECT page_title, "false" AS has_subcategories FROM '.$page.' t WHERE '.$sql.' '.$bundleSql1.') '.
							'UNION DISTINCT (SELECT page_title, "true" AS has_subcategories FROM '.$page.' t WHERE '.$sql2.' '.$bundleSql2.') '.
							'UNION DISTINCT (SELECT c.cl_to, "true" AS has_subcategories FROM '.$categorylinks.' c LEFT JOIN '.$page.' p '.$sql3.' '.$bundleSql3.') '. $noRootCategoryBundles . 
		DBHelper::getSQLOptionsAsString($requestoptions,'page_title'));

			

		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->page_title, 'read', NS_CATEGORY) === "true") {
					$result[] = array(Title::newFromText($row->page_title, NS_CATEGORY), $row->has_subcategories != 'true');
				}
			}
		}

		$db->freeResult($res);
		return $result;
	}




	function getDirectSubCategories(Title $categoryTitle, $requestoptions = NULL, $bundleID = '') {
			
		$db =& wfGetDB( DB_SLAVE );
		$categorylinks = $db->tableName('categorylinks');

		global $dfgLang;
		$partOfBundlePropertyID = smwfGetStore()->getSMWPropertyID(SMWDIProperty::newFromUserLabel($dfgLang->getLanguageString("df_partofbundle")));
		//$partOfBundleID = smwfGetStore()->getSMWPageID($ext_id, NS_MAIN, "");
		$bundleID = str_replace(" ","_",ucfirst($bundleID));
		$bundleSMWID = smwfGetStore()->getSMWPageID($bundleID, NS_MAIN, "", "");
		$smw_ids = $db->tableName('smw_ids');
		$smw_rels2 = $db->tableName('smw_rels2');

		$page = $db->tableName('page');
		$sql = 'page_namespace=' . NS_CATEGORY .
               ' AND page_is_redirect = 0 AND cl_to =' . $db->addQuotes($categoryTitle->getDBkey()) . ' AND cl_from = page_id AND NOT EXISTS (SELECT c.cl_from FROM '.$categorylinks.' c JOIN '.$page.' p ON p.page_id = c.cl_from WHERE c.cl_to = t.page_title AND p.page_namespace='.NS_CATEGORY.')';

		$sql2 = 'page_namespace=' . NS_CATEGORY .
               ' AND page_is_redirect = 0 AND cl_to =' . $db->addQuotes($categoryTitle->getDBkey()) . ' AND cl_from = page_id AND EXISTS (SELECT c.cl_from FROM '.$categorylinks.' c JOIN '.$page.' p ON p.page_id = c.cl_from WHERE c.cl_to = t.page_title AND p.page_namespace='.NS_CATEGORY.')';

		$bundleSql = '';
		if (!empty($bundleID)) {
			$bundleSql = ' AND page_id IN (SELECT pc.page_id pc FROM '.$page.' pc JOIN '.$smw_ids.' ON pc.page_title = smw_title AND pc.page_namespace = '.NS_CATEGORY.' JOIN '.$smw_rels2.' ON s_id = smw_id AND p_id = '.$partOfBundlePropertyID.' AND o_id = '.$bundleSMWID.')';
		}

		$res = $db->query('(SELECT page_title, "true" AS has_subcategories FROM '.$page.' t, '.$categorylinks.' WHERE '.$sql.$bundleSql.') UNION '.
		                   '(SELECT page_title, "false" AS has_subcategories FROM '.$page.' t, '.$categorylinks.' WHERE '.$sql2.$bundleSql.')'.
		DBHelper::getSQLOptionsAsString($requestoptions,'page_title'));

		$result = array();
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->page_title, 'read', NS_CATEGORY) === "true") {
					$result[] = array(Title::newFromText($row->page_title, NS_CATEGORY), $row->has_subcategories == 'true');
				}
			}
		}

		$db->freeResult($res);
		return $result;
	}

	public function getSubCategories(Title $category) {
		$visitedNodes = array();
		return $this->_getSubCategories($category, $visitedNodes);
	}

	private function _getSubCategories(Title $category, & $visitedNodes) {
		$subCategories = $this->getDirectSubCategories($category);
		$result = array();
		foreach($subCategories as $tuple) {
			list($subCat,$isLeaf) = $tuple;
			if (in_array($subCat, $visitedNodes)) {
				continue;
			}
			array_push($visitedNodes, $subCat);
			$result = array_merge($result, $this->_getSubCategories($subCat, $visitedNodes));
		}
		array_pop($visitedNodes);
		return array_merge($result, $subCategories);
	}

	function getDirectSuperCategories(Title $categoryTitle, $requestoptions = NULL) {

		$db =& wfGetDB( DB_SLAVE );
		$page = $db->tableName('page');
		$categorylinks = $db->tableName('categorylinks');
		$sql = 'page_namespace=' . NS_CATEGORY .
			   ' AND page_title =' . $db->addQuotes($categoryTitle->getDBkey()) . ' AND cl_from = page_id AND cl_to IN (SELECT page_title FROM '.$page.' WHERE page_title=cl_to AND page_is_redirect = 0)'.
		DBHelper::getSQLConditions($requestoptions,'cl_to','cl_to');

		$res = $db->select(  array($page, $categorylinks),
		                    'cl_to',
		$sql, 'SMW::getDirectSuperCategories', DBHelper::getSQLOptions($requestoptions,'cl_to') );
		$result = array();
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->cl_to, 'read', NS_CATEGORY) === "true") {
					$result[] = Title::newFromText($row->cl_to, NS_CATEGORY);
				}

			}
		}
		$db->freeResult($res);
		return $result;
	}

	function getCategoriesForInstance(Title $instanceTitle, $requestoptions = NULL, $bundleID = '') {

		$db =& wfGetDB( DB_SLAVE );
		global $dfgLang;
		$partOfBundlePropertyID = smwfGetStore()->getSMWPropertyID(SMWDIProperty::newFromUserLabel($dfgLang->getLanguageString("df_partofbundle")));
		//$partOfBundleID = smwfGetStore()->getSMWPageID($ext_id, NS_MAIN, "");
		$bundleID = str_replace(" ","_",ucfirst($bundleID));
		$bundleSMWID = smwfGetStore()->getSMWPageID($bundleID, NS_MAIN, "", "");
		$smw_ids = $db->tableName('smw_ids');
		$smw_rels2 = $db->tableName('smw_rels2');
		$page = $db->tableName('page');
		$categorylinks = $db->tableName('categorylinks');
		$bundleSql = empty($bundleID) ? '' : ' AND cl_to IN (SELECT pc.page_title FROM '.$page.' pc JOIN '.$smw_ids.' ON pc.page_title = smw_title AND pc.page_namespace = '.NS_CATEGORY.' JOIN '.$smw_rels2.' ON s_id = smw_id AND p_id = '.$partOfBundlePropertyID.' AND o_id = '.$bundleSMWID.')';

		$sql = 'p1.page_title=' . $db->addQuotes($instanceTitle->getDBkey()) . ' AND p1.page_id = cl_from '.$bundleSql.' '.
		DBHelper::getSQLConditions($requestoptions,'cl_to','cl_to');

		$res = $db->select( array($page.' p1', $categorylinks),
                            'DISTINCT cl_to',
		$sql, 'SMW::getCategoriesForInstance',  DBHelper::getSQLOptions($requestoptions,'cl_to'));
		// rewrite result as array
		$result = array();

		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->cl_to, 'read', NS_CATEGORY) === "true") {
					$title = Title::newFromText($row->cl_to, NS_CATEGORY);
					if (!$title->isRedirect()) $result[] = $title;
				}

			}
		}
		$db->freeResult($res);

		return $result;
	}

	function getInstances(Title $categoryTitle, $requestoptions = NULL, $withCategories = true) {
		return $this->_getInstances($categoryTitle, $requestoptions, $withCategories, true);
	}

	function getAllInstances(Title $categoryTitle, $requestoptions = NULL, $withCategories = true) {
		return $this->_getInstances($categoryTitle, $requestoptions, $withCategories, false);
	}

	private function _getInstances(Title $categoryTitle, $requestoptions = NULL, $withCategories = true, $onlyMain = true) {
		$db =& wfGetDB( DB_SLAVE );
		$this->createVirtualTableWithInstances($categoryTitle, $db, $onlyMain);
		$sqlCond = DBHelper::getSQLConditions($requestoptions, 'instance', 'instance');

		if ($withCategories) {
			$res = $db->query('SELECT DISTINCT instance,namespace, category FROM smw_ob_instances WHERE TRUE '.$sqlCond." ".DBHelper::getSQLOptionsAsString($requestoptions,'instance'));
		} else {
			$res = $db->query('SELECT DISTINCT instance,namespace FROM smw_ob_instances WHERE TRUE '.$sqlCond." ".DBHelper::getSQLOptionsAsString($requestoptions,'instance'));
		}
		$results = array();
		if($db->numRows( $res ) > 0)
		{
			$row = $db->fetchObject($res);
			if ($withCategories) {
				while($row)
				{
					if (smwf_om_userCan($row->instance, 'read', $row->namespace) === "true") {
						$instance = Title::newFromText($row->instance, $row->namespace);
						$category = Title::newFromText($row->category, NS_CATEGORY);
						$results[] = array($instance, $category);
					}
					$row = $db->fetchObject($res);
				}
			} else {
				while($row)
				{
					if (smwf_om_userCan($row->instance, 'read', $row->namespace) === "true") {
						$instance = Title::newFromText($row->instance, $row->namespace);
						$results[] = $instance;
					}
					$row = $db->fetchObject($res);
				}
			}
		}
		$db->freeResult($res);

		// drop virtual tables
		$this->dropVirtualTableWithInstances($db);
		return $results;
	}

	/**
	 * Creates a virtual table and adds all (direct and indirect) instances of
	 * $categoryTitle
	 *
	 * @param Title $categoryTitle
	 * @param & $db DB reference
	 * @param boolean $onlyMain True, if only articles from NS_MAIN should be returned. False, if all namespaces (except category) should be returned.
	 */
	protected function createVirtualTableWithInstances($categoryTitle, & $db, $onlyMain = true) {


		$page = $db->tableName('page');
		$categorylinks = $db->tableName('categorylinks');


		// create virtual tables
		$db->query( 'CREATE TEMPORARY TABLE smw_ob_instances (instance VARBINARY(255), namespace INT(11), category VARBINARY(255))
		            ENGINE=MEMORY', 'SMW::createVirtualTableWithInstances' );

		$db->query( 'CREATE TEMPORARY TABLE smw_ob_instances_sub (category VARBINARY(255) NOT NULL)
		            ENGINE=MEMORY', 'SMW::createVirtualTableWithInstances' );
		$db->query( 'CREATE TEMPORARY TABLE smw_ob_instances_super (category VARBINARY(255) NOT NULL)
		            ENGINE=MEMORY', 'SMW::createVirtualTableWithInstances' );

		// initialize with direct instances
		if ($onlyMain) {
			$articleNamespaces = "page_namespace = ".NS_MAIN;
		} else {
			$articleNamespaces = "page_namespace != ".NS_CATEGORY;
		}
		$db->query('INSERT INTO smw_ob_instances (SELECT page_title AS instance,page_namespace AS namespace, NULL AS category FROM '.$page.' ' .
						'JOIN '.$categorylinks.' ON page_id = cl_from ' .
						'WHERE page_is_redirect = 0 AND '.$articleNamespaces.' AND cl_to = '.$db->addQuotes($categoryTitle->getDBkey()).')');

		$db->query('INSERT INTO smw_ob_instances_super VALUES ('.$db->addQuotes($categoryTitle->getDBkey()).')');

		$maxDepth = SMW_MAX_CATEGORY_GRAPH_DEPTH;
		// maximum iteration length is maximum category tree depth.
		do  {
			$maxDepth--;

			// get next subcategory level
			$db->query('INSERT INTO smw_ob_instances_sub (SELECT DISTINCT page_title AS category FROM '.$categorylinks.' JOIN '.$page.' ON page_id = cl_from WHERE page_namespace = '.NS_CATEGORY.' AND cl_to IN (SELECT * FROM smw_ob_instances_super))');

			// insert direct instances of current subcategory level
			$db->query('INSERT INTO smw_ob_instances (SELECT page_title AS instance, page_namespace AS namespace, cl_to AS category FROM '.$page.' ' .
						'JOIN '.$categorylinks.' ON page_id = cl_from ' .
						'WHERE page_is_redirect = 0 AND '.$articleNamespaces.' AND cl_to IN (SELECT * FROM smw_ob_instances_sub))');

			// copy subcatgegories to supercategories of next iteration
			$db->query('DELETE FROM smw_ob_instances_super');
			$db->query('INSERT INTO smw_ob_instances_super (SELECT * FROM smw_ob_instances_sub)');

			// check if there was least one more subcategory. If not, all instances were found.
			$res = $db->query('SELECT COUNT(category) AS numOfSubCats FROM smw_ob_instances_super');
			$numOfSubCats = $db->fetchObject($res)->numOfSubCats;
			$db->freeResult($res);

			$db->query('DELETE FROM smw_ob_instances_sub');

		} while ($numOfSubCats > 0 && $maxDepth > 0);


		$db->query('DROP TEMPORARY TABLE smw_ob_instances_super');
		$db->query('DROP TEMPORARY TABLE smw_ob_instances_sub');
	}

	/**
	 * Drops virtual table for instances.
	 *
	 * @param & $db DB reference
	 */
	protected function dropVirtualTableWithInstances(& $db) {
		$db->query('DROP TEMPORARY TABLE smw_ob_instances');
	}


	function getDirectInstances(Title $categoryTitle, $requestoptions = NULL) {
		$db =& wfGetDB( DB_SLAVE );

		$sql = 'cl_to=' . $db->addQuotes($categoryTitle->getDBkey()) .
			' AND page_is_redirect = 0 AND page_id = cl_from AND page_namespace = '.NS_MAIN.
		DBHelper::getSQLConditions($requestoptions,'page_title','page_title');

		$res = $db->select( array($db->tableName('page'), $db->tableName('categorylinks')),
		                    'DISTINCT page_title',
		$sql, 'SMW::getDirectInstances', DBHelper::getSQLOptions($requestoptions,'page_title'));
		// rewrite result as array
		$result = array();

		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->page_title, 'read', NS_MAIN) === "true") {
					$result[] = Title::newFromText($row->page_title, NS_MAIN);
				}
			}
		}
		$db->freeResult($res);

		return $result;
	}


	function getPropertiesWithSchemaByCategory(Title $categoryTitle, $onlyDirect = false, $subProperty = SMW_SSP_HAS_DOMAIN, $requestoptions = NULL,$bundleID= '') {
		$db =& wfGetDB( DB_SLAVE );

		global $dfgLang;
		$partOfBundlePropertyID = smwfGetStore()->getSMWPropertyID(SMWDIProperty::newFromUserLabel($dfgLang->getLanguageString("df_partofbundle")));
		$bundleID = ucfirst($bundleID);
		$bundleSMWID = smwfGetStore()->getSMWPageID($bundleID, NS_MAIN, "", "");
		$smw_ids = $db->tableName('smw_ids');
		$smw_rels2 = $db->tableName('smw_rels2');

		$smw_subs2 = $db->tableName('smw_subp2');
		$page = $db->tableName('page');

		$bundleSql = empty($bundleID) ? '' : ' WHERE property IN (SELECT pc.page_title FROM '.$page.' pc JOIN '.$smw_ids.' ON pc.page_title = smw_title AND pc.page_namespace = '.SMW_NS_PROPERTY.' JOIN '.$smw_rels2.' ON s_id = smw_id AND p_id = '.$partOfBundlePropertyID.' AND o_id = '.$bundleSMWID.')';


		$this->createVirtualTableWithPropertiesByCategory($categoryTitle, $db, $onlyDirect, $subProperty);

		$res = $db->query( 'SELECT DISTINCT property, inherited FROM smw_ob_properties '.$bundleSql.' '.DBHelper::getSQLOptionsAsString($requestoptions,array('inherited','property')));

		$properties = array();
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->property, 'read', SMW_NS_PROPERTY) === "true") {
					$properties[] = array(Title::newFromText($row->property, SMW_NS_PROPERTY), $row->inherited == 'yes' ? true : false);
				}
					
			}
		}
		$db->freeResult($res);

		$result = $this->getSchemaPropertyTuple($properties, $db);
		$this->dropVirtualTableForProperties($db);
		return $result;
	}

	public function getPropertiesWithSchemaByName($requestoptions) {
		$db =& wfGetDB( DB_SLAVE );
		$this->createVirtualTableWithPropertiesByName($requestoptions, $db);

		$res = $db->query('SELECT DISTINCT property FROM smw_ob_properties '.DBHelper::getSQLOptionsAsString($requestoptions,'property'));
			
		$properties = array();
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->property, 'read', SMW_NS_PROPERTY) === "true") {
					// do not check for redirect, because it's done it the query
					$properties[] = array(Title::newFromText($row->property, SMW_NS_PROPERTY), false);
				}
			}
		}
		$db->freeResult($res);

		$result = $this->getSchemaPropertyTuple($properties, $db);
		$this->dropVirtualTableForProperties($db);
		return $result;
	}
	/**
	 * Returns property schema data for a given array of property titles.
	 * Needs the virtual table 'smw_ob_properties' initialized with the
	 * data given in properties.
	 *
	 * @return array of tuples: (title, minCard, maxCard, type, isSym, isTrans, range)
	 */
	protected function getSchemaPropertyTuple(array & $properties, & $db) {
		$resMinCard = $db->query('SELECT property, value_xsd AS minCard FROM smw_ob_properties  JOIN '.$db->tableName('smw_attributes').
							 ' ON subject_title = property WHERE attribute_title = '.$db->addQuotes(SMWHaloPredefinedPages::$HAS_MIN_CARDINALITY->getDBKey()). ' GROUP BY property ORDER BY property');
		$resMaxCard = $db->query('SELECT property, value_xsd AS maxCard FROM smw_ob_properties  JOIN '.$db->tableName('smw_attributes').
							 ' ON subject_title = property WHERE attribute_title = '.$db->addQuotes(SMWHaloPredefinedPages::$HAS_MAX_CARDINALITY->getDBKey()). ' GROUP BY property ORDER BY property');
		$resTypes = $db->query('SELECT property, value_string AS type FROM smw_ob_properties  JOIN '.$db->tableName('smw_specialprops').
							 ' ON subject_id = id WHERE property_id = '."_TYPE". '  GROUP BY property ORDER BY property');
		$resSymCats = $db->query('SELECT property, cl_to AS minCard FROM smw_ob_properties  JOIN '.$db->tableName('categorylinks').
							 ' ON cl_from = id WHERE cl_to = '.$db->addQuotes(SMWHaloPredefinedPages::$SYMMETRICAL_PROPERTY->getDBKey()). ' GROUP BY property ORDER BY property');
		$resTransCats = $db->query('SELECT property, cl_to AS minCard FROM smw_ob_properties  JOIN '.$db->tableName('categorylinks').
							 ' ON cl_from = id WHERE cl_to = '.$db->addQuotes(SMWHaloPredefinedPages::$TRANSITIVE_PROPERTY->getDBKey()). ' GROUP BY property ORDER BY property');
		$resRanges = $db->query('SELECT property, object_title AS rangeinst FROM smw_ob_properties  JOIN '.$db->tableName('smw_nary_relations'). 'r ON r.subject_id = id JOIN '.$db->tableName('smw_nary').'n ON n.subject_id = r.subject_id '.
							 ' WHERE attribute_title = '.$db->addQuotes(SMWHaloPredefinedPages::$HAS_DOMAIN_AND_RANGE->getDBKey()). ' AND nary_pos = 1 GROUP BY property ORDER BY property');					 
		// rewrite result as array
		$result = array();

		$rowMinCard = $db->fetchObject($resMinCard);
		$rowMaxCard = $db->fetchObject($resMaxCard);
		$rowType = $db->fetchObject($resTypes);
		$rowSymCat = $db->fetchObject($resSymCats);
		$rowTransCats = $db->fetchObject($resTransCats);
		$rowRanges = $db->fetchObject($resRanges);
		foreach($properties as $props) {
			list($p, $inherited) = $props;
			$minCard = CARDINALITY_MIN;
			if ($rowMinCard != NULL && $rowMinCard->property == $p->getDBkey()) {
				$minCard = $rowMinCard->minCard;
				$rowMinCard = $db->fetchObject($resMinCard);
			}
			$maxCard = CARDINALITY_UNLIMITED;
			if ($rowMaxCard != NULL && $rowMaxCard->property == $p->getDBkey()) {
				$maxCard = $rowMaxCard->maxCard;
				$rowMaxCard = $db->fetchObject($resMaxCard);
			}
			$type = '_wpg';

			if ($rowType != NULL && $rowType->property == $p->getDBkey()) {
				$type = $rowType->type;
				$rowType = $db->fetchObject($resTypes);
			}
			$symCat = false;
			if ($rowSymCat != NULL && $rowSymCat->property == $p->getDBkey()) {
				$symCat = true;
				$rowSymCat = $db->fetchObject($resSymCats);
			}
			$transCat = false;
			if ($rowTransCats != NULL && $rowTransCats->property == $p->getDBkey()) {
				$transCat = true;
				$rowTransCats = $db->fetchObject($resTransCats);
			}
			$range = NULL;
			if ($rowRanges != NULL && $rowRanges->property == $p->getDBkey()) {
				$range = $rowRanges->rangeinst;
				$rowRanges = $db->fetchObject($resRanges);
			}
			$result[] = array($p, $minCard, $maxCard, $type, $symCat, $transCat, $range, $inherited);

		}
		$db->freeResult($resMinCard);
		$db->freeResult($resMaxCard);
		$db->freeResult($resTypes);
		$db->freeResult($resSymCats);
		$db->freeResult($resTransCats);
		$db->freeResult($resRanges);
		return $result;
	}

	/**
	 * Returns a virtual 'smw_ob_properties' table with properties matching $stringConditions
	 *
	 */
	protected function createVirtualTableWithPropertiesByName($requestoptions, & $db) {


		$page = $db->tableName('page');
		$redirect = $db->tableName('redirect');
		$redirects = $db->tableName('redirect');
		$db->query( 'CREATE TEMPORARY TABLE smw_ob_properties (id INT(8) NOT NULL, property VARBINARY(255))
		            ENGINE=MEMORY', 'SMW::createVirtualTableForInstances' );
		$sql = DBHelper::getSQLConditions($requestoptions,'page_title','page_title');
		// add properties which match and which are no redirects
		$db->query('INSERT INTO smw_ob_properties (SELECT page_id, page_title FROM '.$page.' WHERE page_is_redirect = 0 AND page_namespace = '.SMW_NS_PROPERTY.' '. $sql.')');
		$sql = DBHelper::getSQLConditions($requestoptions,'p1.page_title','p1.page_title');
		// add targets of matching redirects
		$db->query('INSERT INTO smw_ob_properties (SELECT p2.page_id, p2.page_title FROM '.$page.' p1 JOIN '.$redirect.' ON p1.page_id = rd_from JOIN '.$page.' p2 ON p2.page_title = rd_title AND p2.page_namespace = rd_namespace WHERE p1.page_namespace = '.SMW_NS_PROPERTY.' '. $sql.')');
	}
	/**
	 * Creates 'smw_ob_properties' and fills it with all properties (including inherited)
	 * of a category.
	 *
	 * @param Title $category
	 * @param & $db
	 */
	protected function createVirtualTableWithPropertiesByCategory(Title $categoryTitle, & $db) {


		$page = $db->tableName('page');
		$categorylinks = $db->tableName('categorylinks');
		$smw_nary = $db->tableName('smw_nary');
		$smw_nary_relations = $db->tableName('smw_nary_relations');


		// create virtual tables
		$db->query( 'CREATE TEMPORARY TABLE smw_ob_properties (id INT(8) NOT NULL, property VARBINARY(255))
		            ENGINE=MEMORY', 'SMW::createVirtualTableWithPropertiesByCategory' );

		$db->query( 'CREATE TEMPORARY TABLE smw_ob_properties_sub (category INT(8) NOT NULL)
		            ENGINE=MEMORY', 'SMW::createVirtualTableWithPropertiesByCategory' );
		$db->query( 'CREATE TEMPORARY TABLE smw_ob_properties_super (category INT(8) NOT NULL)
		            ENGINE=MEMORY', 'SMW::createVirtualTableWithPropertiesByCategory' );

		$db->query('INSERT INTO smw_ob_properties (SELECT n.subject_id AS id, n.subject_title AS property FROM '.$smw_nary.' n JOIN '.$smw_nary_relations.' r ON n.subject_id = r.subject_id JOIN '.$page.' p ON n.subject_id = p.page_id '.
					' WHERE r.nary_pos = 0 AND n.attribute_title = '. $db->addQuotes(SMWHaloPredefinedPages::$HAS_DOMAIN_AND_RANGE->getDBkey()). ' AND r.object_title = ' .$db->addQuotes($categoryTitle->getDBkey()).' AND p.page_is_redirect = 0)');

		$db->query('INSERT INTO smw_ob_properties_sub VALUES ('.$db->addQuotes($categoryTitle->getArticleID()).')');

		$maxDepth = SMW_MAX_CATEGORY_GRAPH_DEPTH;
		// maximum iteration length is maximum category tree depth.
		do  {
			$maxDepth--;

			// get next supercategory level
			$db->query('INSERT INTO smw_ob_properties_super (SELECT DISTINCT page_id AS category FROM '.$categorylinks.' JOIN '.$page.' ON page_title = cl_to WHERE page_namespace = '.NS_CATEGORY.' AND cl_from IN (SELECT * FROM smw_ob_properties_sub))');

			// insert direct properties of current supercategory level
			$db->query('INSERT INTO smw_ob_properties (SELECT n.subject_id AS id, n.subject_title AS property FROM '.$smw_nary.' n JOIN '.$smw_nary_relations.' r ON n.subject_id = r.subject_id JOIN '.$page.' p ON n.subject_id = p.page_id '.
					' WHERE r.nary_pos = 0 AND n.attribute_title = '. $db->addQuotes(SMWHaloPredefinedPages::$HAS_DOMAIN_AND_RANGE->getDBkey()). ' AND p.page_is_redirect = 0 AND r.object_id IN (SELECT * FROM smw_ob_properties_super))');


			// copy supercatgegories to subcategories of next iteration
			$db->query('DELETE FROM smw_ob_properties_sub');
			$db->query('INSERT INTO smw_ob_properties_sub (SELECT * FROM smw_ob_properties_super)');

			// check if there was least one more supercategory. If not, all properties were found.
			$res = $db->query('SELECT COUNT(category) AS numOfSuperCats FROM smw_ob_properties_sub');
			$numOfSuperCats = $db->fetchObject($res)->numOfSuperCats;
			$db->freeResult($res);

			$db->query('DELETE FROM smw_ob_properties_super');

		} while ($numOfSuperCats > 0 && $maxDepth > 0);
			
		$db->query('DROP TEMPORARY TABLE smw_ob_properties_super');
		$db->query('DROP TEMPORARY TABLE smw_ob_properties_sub');
	}

	/**
	 * Drops table 'smw_ob_properties'.
	 */
	protected function dropVirtualTableForProperties(& $db) {
		$db->query('DROP TEMPORARY TABLE smw_ob_properties');
	}




	function getPropertiesWithDomain(Title $category) {
		global $smwgHaloContLang;
		$ssp = $smwgHaloContLang->getSpecialSchemaPropertyArray();
		return $this->getNarySubjects($category, SMWDIProperty::newFromUserLabel($ssp[SMW_SSP_HAS_DOMAIN]));
	}

	function getPropertiesWithRange(Title $category) {
		global $smwgHaloContLang;
		$ssp = $smwgHaloContLang->getSpecialSchemaPropertyArray();
		return $this->getNarySubjects($category, SMWDIProperty::newFromUserLabel($ssp[SMW_SSP_HAS_RANGE]));
	}

	protected function getNarySubjects(Title $object, SMWDIProperty $property) {
		// no impl. outdated
	}

	/**
	 * Returns all domain categories for a given property.
	 */
	function getDomainCategories($propertyTitle, $reqfilter = NULL, $bundleID = '') {
		$db =& wfGetDB( DB_SLAVE );
		$page = $db->tableName('page');
		$domainRangePropertyDi = SMWDIProperty::newFromUserLabel(SMWHaloPredefinedPages::$HAS_DOMAIN_AND_RANGE->getText());
		$categories = smwfGetStore()->getPropertyValues(SMWDIWikiPage::newFromTitle($propertyTitle), $domainRangePropertyDi, $reqfilter);

		$result = array();
		global $smwgHaloContLang;
		$ssp = $smwgHaloContLang->getSpecialSchemaPropertyArray();

		foreach($categories as $value) {
			$sd = $value->getSemanticData();

			$domain = $sd->getPropertyValues(SMWDIProperty::newFromUserLabel($ssp[SMW_SSP_HAS_DOMAIN]));
			$domainDi = reset($domain);

			if ($domainDi instanceof SMWDIWikiPage) {
				$t = $domainDi->getTitle();
				if (!empty($bundleID)) {
					if (!DFBundleTools::isPartOfBundle($t, $bundleID)) continue;
				}
				if (!SMWSemanticStoreSQL::isRedirect($t, $page, $db)) $result[] = $t;
			}
		}
		return $result;
	}

	/**
	 * Returns all range categories for a given property.
	 */
	function getRangeCategories($propertyTitle, $reqfilter = NULL) {
		$db =& wfGetDB( DB_SLAVE );
		$page = $db->tableName('page');
		$domainRangePropertyDi = SMWDIProperty::newFromUserLabel(SMWHaloPredefinedPages::$HAS_DOMAIN_AND_RANGE->getText());
		$categories = smwfGetStore()->getPropertyValues(SMWDIWikiPage::newFromTitle($propertyTitle), $domainRangePropertyDi, $reqfilter);

		$result = array();
		global $smwgHaloContLang;
		$ssp = $smwgHaloContLang->getSpecialSchemaPropertyArray();

		foreach($categories as $value) {
			if ($value instanceof SMWDIError) {
				continue;
			}
			$sd = $value->getSemanticData();

			$domain = $sd->getPropertyValues(SMWDIProperty::newFromUserLabel($ssp[SMW_SSP_HAS_RANGE]));
			$domainDi = reset($domain);

			if ($domainDi instanceof SMWDIWikiPage) {
				$t = $domainDi->getTitle();
				if (!SMWSemanticStoreSQL::isRedirect($t, $page, $db)) $result[] = $t;
			}
		}
		return $result;
	}

	function getDirectSubProperties(Title $attribute, $requestoptions = NULL) {
			
		$result = "";
		$db =& wfGetDB( DB_SLAVE );
		$page = $db->tableName('page');
		$smw_subprops = $db->tableName('smw_subprops');
		$sql = 'object_title = ' . $db->addQuotes($attribute->getDBkey()).' AND page_is_redirect = 0 AND subject_title = page_title AND page_namespace = '.SMW_NS_PROPERTY;

		$res = $db->select( array($smw_subprops, $page),
		                    'subject_title',
		$sql, 'SMW::getDirectSubProperties', DBHelper::getSQLOptions($requestoptions,'subject_title') );
		$result = array();
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->subject_title, 'read', SMW_NS_PROPERTY) === "true") {
					$result[] = Title::newFromText($row->subject_title, SMW_NS_PROPERTY);
				}

			}
		}
		$db->freeResult($res);
		return $result;
	}

	function getDirectSuperProperties(Title $attribute, $requestoptions = NULL) {
			
			
		$db =& wfGetDB( DB_SLAVE );
		$page = $db->tableName('page');
		$smw_subprops = $db->tableName('smw_subprops');
		$sql = 'subject_title = ' . $db->addQuotes($attribute->getDBkey()).' AND page_is_redirect = 0 AND object_title = page_title AND page_namespace = '.SMW_NS_PROPERTY;

		$res = $db->select(   array($smw_subprops, $page),
		                    'object_title',
		$sql, 'SMW::getDirectSuperProperties', DBHelper::getSQLOptions($requestoptions,'object_title') );
		$result = array();
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->object_title, 'read', SMW_NS_PROPERTY) === "true") {
					$result[] = Title::newFromText($row->object_title, SMW_NS_PROPERTY);
				}

			}
		}
		$db->freeResult($res);
		return $result;
	}

	public function getRedirectPages(Title $title) {
		$db =& wfGetDB( DB_SLAVE );
		$page = $db->tableName('page');
		$redirect = $db->tableName('redirect');
		$res = $db->query('SELECT page_title, page_namespace FROM '.$page.', '.$redirect.' WHERE '.$db->addQuotes($title->getDBkey()).' = rd_title AND '.$title->getNamespace().' = rd_namespace AND page_id = rd_from');
		$result = array();
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				if (smwf_om_userCan($row->page_title, 'read', $row->page_namespace) === "true") {
					$result[] = Title::newFromText($row->page_title, $row->page_namespace);
				}
			}
		}
		$db->freeResult($res);
		return $result;
	}

	public function getRedirectTarget(Title $title) {
		$db =& wfGetDB( DB_SLAVE );
		$redirect = $db->tableName('redirect');
		$res = $db->query('SELECT rd_namespace, rd_title FROM '.$redirect.' WHERE rd_from = '.$title->getArticleID());
			
		if ($db->numRows( $res ) == 0) {
			$db->freeResult($res);
			return $title;
		}
		$row = $db->fetchObject($res);
		$result = Title::newFromText($row->rd_title, $row->rd_namespace);
		$db->freeResult($res);
		return $result;
	}



	public function getNumberOfUsage(Title $title) {
		$num = 0;
		$db =& wfGetDB( DB_SLAVE );
		if ($title->getNamespace() == NS_TEMPLATE) {
			$templatelinks = $db->tableName('templatelinks');
			$res = $db->query('SELECT COUNT(tl_from) AS numOfSubjects FROM '.$templatelinks.' s WHERE tl_title = '.$db->addQuotes($title->getDBKey()).' GROUP BY tl_title ');
		} else if ($title->getNamespace() == SMW_NS_PROPERTY) {
			$smw_attributes = $db->tableName('smw_attributes');
			$smw_relations = $db->tableName('smw_relations');
			$smw_nary = $db->tableName('smw_nary');
			$res = $db->query('SELECT COUNT(subject_title) AS numOfSubjects FROM '.$smw_attributes.' s WHERE attribute_title = '.$db->addQuotes($title->getDBKey()).' GROUP BY attribute_title ' .
							  ' UNION SELECT COUNT(subject_title) AS numOfSubjects FROM '.$smw_nary.' s WHERE attribute_title = '.$db->addQuotes($title->getDBKey()).' GROUP BY attribute_title' .
							  ' UNION SELECT COUNT(subject_title) AS numOfSubjects FROM '.$smw_relations.' s WHERE relation_title = '.$db->addQuotes($title->getDBKey()).' GROUP BY relation_title;');
		}
		if($db->numRows( $res ) > 0) {
			$row = $db->fetchObject($res);
			$num = $row->numOfSubjects;
		}
		$db->freeResult($res);
		return $num;
	}

	public function getNumberOfInstancesAndSubcategories(Title $category) {
		$db =& wfGetDB( DB_SLAVE );
		$this->createVirtualTableWithInstances($category, $db);

		$res = $db->query ('SELECT COUNT(DISTINCT instance) AS numOfInstances FROM smw_ob_instances');

		// rewrite result as array
		$numOfInstances = 0;

		if($db->numRows( $res ) > 0) {
			$row = $db->fetchObject($res);
			$numOfInstances = $row->numOfInstances;

		}
		$db->freeResult($res);

		$this->dropVirtualTableWithInstances($db);
		return $numOfInstances;
	}

	public function getNumberOfProperties(Title $category) {
		$db =& wfGetDB( DB_SLAVE );
		$this->createVirtualTableWithPropertiesByCategory($category, $db);
		$res = $db->query( 'SELECT COUNT(DISTINCT property) AS numOfProperties FROM smw_ob_properties');

		// rewrite result as array
		$result = 0;

		if($db->numRows( $res ) > 0) {
			$row = $db->fetchObject($res);
			$result = $row->numOfProperties;

		}
		$db->freeResult($res);
		$this->dropVirtualTableForProperties($db);
		return $result;
	}

	public function getNumberOfPropertiesForTarget(Title $target) {
		$db =& wfGetDB( DB_SLAVE );
		$result = 0;
		$res = $db->select( $db->tableName('smw_relations'),
		                    'COUNT(DISTINCT relation_title) AS numOfProperties',
		array('object_title' => $target->getDBkey()), 'SMW::getNumberOfPropertiesForTarget', array() );
		if($db->numRows( $res ) > 0) {
			$row = $db->fetchObject($res);
			$result += $row->numOfProperties;
		}
		$db->freeResult($res);

		$res = $db->select( array($db->tableName('smw_nary_relations'). " r", $db->tableName('smw_nary'). " n"),
		                    'COUNT(DISTINCT object_title) AS numOfProperties',
		array('r.subject_id' => 'n.subject_id', 'object_title' => $target->getDBkey()), 'SMW::getNumberOfPropertiesForTarget', array() );
		if($db->numRows( $res ) > 0) {
			$row = $db->fetchObject($res);
			$result += $row->numOfProperties;
		}
		$db->freeResult($res);
		return $result;
	}

	public function getNumber($namespace) {
		$db =& wfGetDB( DB_SLAVE );
		$result = 0;
		$res = $db->select( $db->tableName('page'),
                            'COUNT(DISTINCT page_title) AS num',
		array('page_namespace' => $namespace), 'SMW::getNumber', array() );
		if($db->numRows( $res ) > 0) {
			$row = $db->fetchObject($res);
			$result += $row->num;
		}
		$db->freeResult($res);
		return $result;
	}

	public function getDistinctUnits(Title $type) {
		$db =& wfGetDB( DB_SLAVE );
		$smw_attributes = $db->tableName('smw_attributes');
		$smw_nary = $db->tableName('smw_nary');
		$smw_nary_attributes = $db->tableName('smw_nary_attributes');
		$smw_specialprops = $db->tableName('smw_specialprops');
		$page = $db->tableName('page');
			
		$res = $db->query(	'(SELECT DISTINCT a.value_unit FROM '.$smw_attributes.' a JOIN '.$page.' p ON p.page_title = a.attribute_title AND p.page_namespace = '.SMW_NS_PROPERTY.' JOIN '.$smw_specialprops.' s ON p.page_id = s.subject_id AND s.property_id = '."_TYPE".' WHERE s.value_string = '.$db->addQuotes($type->getDBkey()).') '.
						 ' UNION ' .
					 		'(SELECT DISTINCT value_unit FROM '.$smw_specialprops.' s JOIN '.$page.' p ON s.subject_id=p.page_id ' .
					 				'JOIN '.$smw_nary.' n ON LOCATE('.$db->addQuotes($type->getDBkey()).', s.value_string) > 0 AND p.page_title=n.attribute_title ' .
					 				'JOIN '.$smw_nary_attributes.' a ON n.nary_key=a.nary_key)');

		$result = array();
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				$result[] = $row->value_unit;
			}
		}
		$db->freeResult($res);
		return $result;
	}

	public function getAnnotationsWithUnit(Title $type, $unit) {

		$db =& wfGetDB( DB_SLAVE );
		$smw_attributes = $db->tableName('smw_attributes');
		$smw_nary = $db->tableName('smw_nary');
		$smw_nary_attributes = $db->tableName('smw_nary_attributes');
		$smw_specialprops = $db->tableName('smw_specialprops');
		$page = $db->tableName('page');
			
		$result = array();
		$res = $db->query('SELECT DISTINCT a.subject_title, a.subject_namespace, a.attribute_title FROM '.$smw_specialprops.' s JOIN '.$page.' p ON p.page_id = s.subject_id JOIN '.$smw_attributes.' a ON a.attribute_title = p.page_title AND s.property_id = '."_TYPE".
							' WHERE s.value_string = '.$db->addQuotes($type->getDBkey()).' AND a.value_unit = '.$db->addQuotes($unit));

		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				$result[] = array(Title::newFromText($row->subject_title, $row->subject_namespace), Title::newFromText($row->attribute_title, SMW_NS_PROPERTY));
			}
		}

		$db->freeResult($res);

		$res2 = $db->query('SELECT DISTINCT n.subject_title, n.subject_namespace, attribute_title FROM '.$smw_specialprops.' s JOIN '.$page.' p ON p.page_id = s.subject_id ' .
					 				'JOIN '.$smw_nary.' n ON CONTAINS(s.value_string, '.$db->addQuotes($type->getDBkey()).') AND p.page_title=n.attribute_title ' .
					 				'JOIN '.$smw_nary_attributes.' a ON n.nary_key=a.nary_key ' .
					 	  'WHERE value_unit = '.$db->addQuotes($unit));


		if($db->numRows( $res2 ) > 0) {
			while($row = $db->fetchObject($res2)) {
				$result[] = array(Title::newFromText($row->subject_title, $row->subject_namespace), Title::newFromText($row->attribute_title, SMW_NS_PROPERTY));
			}
		}

		$db->freeResult($res2);

		return $result;
	}


	// public methods which are not reflected in the SMWSemanticStore interface
	public function invalidateAllPages() {
			
		$dbw = wfGetDB( DB_MASTER );
		$smw_page = $dbw->tableName('page');


		$success = $dbw->update( $smw_page,
		array( /* SET */
				'page_touched' => $dbw->timestamp()
		), array(true), 'SMWSemanticStoreSQL::invalidatePages'
		);
	}


	///// Private methods /////



	/**
	 * Creates some predefined pages
	 */
	protected function createPreDefinedPages($verbose) {
		global $smwgHaloContLang, $smwgContLang;
		DBHelper::reportProgress("Creating predefined pages...\n",$verbose);
		$ssp = $smwgHaloContLang->getSpecialSchemaPropertyArray();
		$propertyLabels = $smwgContLang->getPropertyLabels();
		$namespaces = $smwgContLang->getNamespaces();
		$datatypeLabels = $smwgContLang->getDatatypeLabels();
		foreach($ssp as $key => $value) {
			$t = Title::newFromText($value, SMW_NS_PROPERTY);
			$article = new Article($t);
			$exists = $t->exists();
			if (strtolower($ssp[SMW_SSP_HAS_DOMAIN_AND_RANGE_HINT]) == strtolower($t->getText())) {
				$text = "\n\n[[".$propertyLabels['_TYPE']."::".$datatypeLabels["_rec"]."]]";
				$text .= wfMsg('smw_predefined_props', $t->getText())."\n\n[[".$propertyLabels['_LIST']."::".
				$ssp[SMW_SSP_HAS_DOMAIN]."; ".$ssp[SMW_SSP_HAS_RANGE]."]]";
				if ($exists) {
					$article->doEdit($text, "", EDIT_UPDATE | EDIT_FORCE_BOT);
				} else {
					$article->insertNewArticle($text, "", false, false);
				}
			} else if (strtolower($ssp[SMW_SSP_HAS_MAX_CARD]) == strtolower($t->getText())) { // special handling for SMW_SSP_HAS_MAX_CARD.
				$text = wfMsg('smw_predefined_props', $t->getText())."\n\n[[".$propertyLabels['_TYPE']."::".
				$datatypeLabels["_num"]."]]";
				if ($exists) {
					$article->doEdit($text, "", EDIT_UPDATE | EDIT_FORCE_BOT);
				} else {
					$article->insertNewArticle($text, "", false, false);
				}
			} else if (strtolower($ssp[SMW_SSP_HAS_MIN_CARD]) == strtolower($t->getText())) { // special handling for SMW_SSP_HAS_MIN_CARD.
				$text = wfMsg('smw_predefined_props', $t->getText())."\n\n[[".$propertyLabels['_TYPE']."::".
				$datatypeLabels["_num"]."]]";
				if ($exists) {
					$article->doEdit($text, "", EDIT_UPDATE | EDIT_FORCE_BOT);
				} else {
					$article->insertNewArticle($text, "", false, false);
				}
			} else if (strtolower($ssp[SMW_SSP_ONTOLOGY_URI]) == strtolower($t->getText())) { // special handling for SMW_SSP_HAS_MIN_CARD.
				$text = wfMsg('smw_predefined_props', $t->getText())."\n\n[[".$propertyLabels['_TYPE']."::".
				$datatypeLabels["_uri"]."]]";
				if ($exists) {
					$article->doEdit($text, "", EDIT_UPDATE | EDIT_FORCE_BOT);
				} else {
					$article->insertNewArticle($text, "", false, false);
				}
			} else {
				$text = wfMsg('smw_predefined_props', $t->getText());
				if ($exists) {
					$article->doEdit($text, "", EDIT_UPDATE | EDIT_FORCE_BOT);
				} else {
					$article->insertNewArticle($text, "", false, false);
				}
			}
			if ($exists) {
				DBHelper::reportProgress("   ... updated page ".$t->getNsText().":".$t->getText()."...\n",$verbose);
			} else {
				DBHelper::reportProgress("   ... Create page ".$t->getNsText().":".$t->getText()."...\n",$verbose);
			}

		}

		$scs = $smwgHaloContLang->getSpecialCategoryArray();
		foreach($scs as $key => $value) {
			$t = Title::newFromText($value, NS_CATEGORY);
			if (!$t->exists()) {
				$article = new Article($t);
				$article->insertNewArticle(wfMsg('smw_predefined_cats', $t->getText()), "", false, false);
				DBHelper::reportProgress("   ... Create page ".$t->getNsText().":".$t->getText()."...\n",$verbose);
			}
		}

		// create NEP templates
		global $smwgHaloIP;
		$contents = file_get_contents("$smwgHaloIP/resources/nep/NEP_Generic.template");
		$t = Title::newFromText("NEP/Generic", NS_MEDIAWIKI);
		$article = new Article($t);
		if (!$t->exists()) {
			$article->insertNewArticle($contents, "", false, false);
			DBHelper::reportProgress("   ... Create page ".$t->getNsText().":".$t->getText()."...\n",$verbose);
		} else {
			$article->doEdit( $contents, "", EDIT_UPDATE | EDIT_FORCE_BOT);
			DBHelper::reportProgress("   ... updated page ".$t->getNsText().":".$t->getText()."...\n",$verbose);
		}

		$this->createHelpAttributes($verbose);

		DBHelper::reportProgress("   ... done!\n",$verbose);
	}

	protected function removePredefinedProperties($verbose = true) {
		global $smwgHaloContLang;
		$ssp = $smwgHaloContLang->getSpecialSchemaPropertyArray();
		foreach($ssp as $key => $value) {
			$t = Title::newFromText($value, SMW_NS_PROPERTY);
			$article = new Article($t);
			if ($t->exists()) {
				$article->doDeleteArticle("de-installation of SMWHalo");
				DBHelper::reportProgress("   ... deleted page ".$t->getPrefixedText().".\n",$verbose);
			}
		}
	}

	protected function createHelpAttributes($verbose){
		global $smwgContLang;
		$propertyLabels = $smwgContLang->getPropertyLabels();
		$namespaces = $smwgContLang->getNamespaces();
		$datatypeLabels = $smwgContLang->getDatatypeLabels();
		$title = Title::newFromText("Question", SMW_NS_PROPERTY);
		$article = new Article($title);
		$articleContent = "[[".$propertyLabels['_TYPE']."::".$datatypeLabels["_str"]."]]";
		$wgArticle = new Article( $title );
		if (!($title->exists())){
			$wgArticle->doEdit( $articleContent, "New attribute added", EDIT_NEW);
			DBHelper::reportProgress("   ... Create page ".$title->getNsText().":".$title->getText()."...\n",$verbose);
		} else {
			$wgArticle->doEdit( $articleContent, "New attribute added", EDIT_UPDATE | EDIT_FORCE_BOT);
			DBHelper::reportProgress("   ... updated page ".$title->getNsText().":".$title->getText()."...\n",$verbose);
		}
		$title = Title::newFromText("Description", SMW_NS_PROPERTY);
		$article = new Article($title);
		$articleContent = "[[".$propertyLabels['_TYPE']."::".$datatypeLabels["_txt"]."]]";
		$wgArticle = new Article( $title );
		if (!($title->exists())){
			$wgArticle->doEdit( $articleContent, "New attribute added", EDIT_NEW);
			DBHelper::reportProgress("   ... Create page ".$title->getNsText().":".$title->getText()."...\n",$verbose);
		} else {
			$wgArticle->doEdit( $articleContent, "New attribute added", EDIT_UPDATE | EDIT_FORCE_BOT);
			DBHelper::reportProgress("   ... updated page ".$title->getNsText().":".$title->getText()."...\n",$verbose);
		}
		$title = Title::newFromText("DiscourseState", SMW_NS_PROPERTY);
		$article = new Article($title);
		$articleContent = "[[".$propertyLabels['_TYPE']."::".$datatypeLabels["_str"]."]]";
		$wgArticle = new Article( $title );
		if (!($title->exists())){
			$wgArticle->doEdit( $articleContent, "New attribute added", EDIT_NEW);
			DBHelper::reportProgress("   ... Create page ".$title->getNsText().":".$title->getText()."...\n",$verbose);
		} else {
			$wgArticle->doEdit( $articleContent, "New attribute added", EDIT_UPDATE | EDIT_FORCE_BOT);
			DBHelper::reportProgress("   ... updated page ".$title->getNsText().":".$title->getText()."...\n",$verbose);
		}
	}








	public function replaceRedirectAnnotations($verbose = false) {
			
		$db =& wfGetDB( DB_MASTER );
		$page = $db->tableName('page');
		$redirect = $db->tableName('redirect');
		$smw_attributes = $db->tableName('smw_attributes');
		$smw_relations = $db->tableName('smw_relations');
		$smw_nary = $db->tableName('smw_nary');
			

		$result = array();
		if ($verbose) echo "\n\nSelecting all pages with redirect annotations...\n";
			
		// select all annotations of redirect pages
		$sql = 'page_id = rd_from AND page_title = attribute_title AND page_namespace = 102';
		$res = $db->select( array($page, $redirect, $smw_attributes), array('rd_title', 'attribute_title', 'subject_title', 'subject_namespace'),
		$sql, 'SMW::repairRedirectAnnotations');
			
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				$result[] = array($row->subject_title, $row->subject_namespace, $row->attribute_title, $row->rd_title);
			}
		}
		$db->freeResult($res);

		$res = $db->select( array($page, $redirect, $smw_nary), array('rd_title', 'attribute_title', 'subject_title', 'subject_namespace'),
		$sql, 'SMW::repairRedirectAnnotations');
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				$result[] = array($row->subject_title, $row->subject_namespace, $row->attribute_title, $row->rd_title);
			}
		}
		$db->freeResult($res);

		$sql = 'page_id = rd_from AND page_title = relation_title AND page_namespace = 102';
		$res = $db->select( array($page, $redirect, $smw_relations), array('rd_title', 'relation_title', 'subject_title', 'subject_namespace'),
		$sql, 'SMW::repairRedirectAnnotations');
			
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				$result[] = array($row->subject_title, $row->subject_namespace, $row->relation_title, $row->rd_title);
			}
		}
		$db->freeResult($res);
			
		if ($verbose && count($result) == 0) echo "None found! Go ahead.\n";
			
		// replace redirect annotation with annotation of redirect target. Also replace it on templates linked with the subject.
		foreach($result as $r) {

			$title = Title::newFromText($r[0], $r[1]);
			if ($title == NULL) continue;
			$this->replaceProperties($title, $r[2], $r[3], $verbose);
			$this->replacePropertiesOnTemplates($title, $r[2], $r[3], $verbose, $db);
		}

		if ($verbose) echo "\n\n";
	}

	/**
	 * Gets template which are used on $title and replaced the property annotation of
	 * $redirectProperty with $targetProperty. Usual constraints apply.
	 *
	 * @param $title Title
	 * @param $redirectProperty string
	 * @param $targetProperty string
	 * @param $verbose boolean
	 * @param & $db database
	 */
	private function replacePropertiesOnTemplates(Title $title, $redirectProperty, $targetProperty, $verbose, & $db) {
		$templatelinks = $db->tableName('templatelinks');
		$sql = 'tl_from = '.$title->getArticleID();
		$res = $db->select( $templatelinks, array('DISTINCT tl_title', 'tl_namespace'),
		$sql, 'SMW::replacePropertiesOnTemplates');
			
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				$title = Title::newFromText($row->tl_title, $row->tl_namespace);
				if ($title == NULL) continue;
				$this->replaceProperties($title, $redirectProperty, $targetProperty, $verbose);
			}
		}
		$db->freeResult($res);

	}

	/**
	 * Replaces annotations of $redirectProperty with $targetProperty on page
	 * $title.
	 *
	 * @param $title Title
	 * @param $redirectProperty string
	 * @param $targetProperty string
	 * @param $verbose boolean
	 */
	private function replaceProperties($title, $redirectProperty, $targetProperty, $verbose) {
		global $wgParser;
		$options = new ParserOptions();
		$rev = Revision::newFromTitle( $title );
		if ($rev == NULL) return;
		$a = new Article($title);
		if ($a == NULL) return;
			
		$matches = array();
		$text = $rev->getText();

		preg_match_all('/\[\[\s*'.preg_quote(str_replace("_", " ",$redirectProperty)).'\s*:[:|=]([^]]*)\]\]/i', $text, $matches);

		$newtext = NULL;
		foreach($matches[1] as $m) {
			$repl = "[[".str_replace("_", " ",$targetProperty)."::".$m."]]";
			$newtext = preg_replace('/\[\[\s*'.preg_quote(str_replace("_", " ",$redirectProperty)).'\s*:[:|=]'.preg_quote($m).'\]\]/i', $repl, $text);
		}
			
		if ($newtext != NULL && $text != $newtext) {
			if ($verbose) echo "\n - Replacing annotated redirects on ".$title->getText()."...";

			$a->doEdit($newtext, $rev->getComment(), EDIT_UPDATE);
			$wgParser->parse($newtext, $title, $options, true, true, $rev->getID());
			SMWFactbox::storeData(true);
			if ($verbose) echo "done!";
		}
	}


}

