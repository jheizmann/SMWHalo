<?php
/*
 * Copyright (C) Vulcan Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * Stores TSC mapping information.
 *
 * @author kuehn
 *
 */
class TSCMappingStore {

	public static function getTSCURI($title) {
		$db =& wfGetDB( DB_SLAVE );
		$smw_urimapping = $db->tableName('smw_urimapping');
		$tscURI = $db->selectRow($smw_urimapping, array('smw_uri'), array('page_id'=>$title->getArticleID()));
		if ($tscURI !== false) return str_replace(" ","_",$tscURI->smw_uri);

		$parts = explode("/", $title->getDBkey());
		$prefix = $parts[0];
		$ns_uri = self::getNamespaceMapping($prefix);
		if (is_null($ns_uri)) return NULL;
		return $ns_uri.substr($title->getDBkey(), strlen($prefix)+1);
	}

	public static function getNamespaceMapping($prefix) {
		$db =& wfGetDB( DB_SLAVE );
		$smw_nsmapping = $db->tableName('smw_nsmapping');
		$uri = $db->selectRow($smw_nsmapping, array('smw_uri'), array('smw_prefix'=>$prefix));
		return $uri !== false ? $uri->smw_uri : NULL;
	}

	public static function getAllNamespaceMappings() {
		$db =& wfGetDB( DB_SLAVE );
		if (!$db->tableExists('smw_nsmapping')) return array();
		$smw_nsmapping = $db->tableName('smw_nsmapping');
		$res = $db->select($smw_nsmapping, array('smw_prefix', 'smw_uri'));
		$result = array();
		if($db->numRows( $res ) > 0) {
			while($row = $db->fetchObject($res)) {
				$result[$row->smw_prefix] = $row->smw_uri;
			}
		}
		$db->freeResult($res);
		return $result;
	}

	public static function addNamespaceMapping($prefix, $uri) {
		$db =& wfGetDB( DB_MASTER );
		$smw_nsmapping = $db->tableName('smw_nsmapping');
		$db->query('INSERT INTO '.$smw_nsmapping.' VALUES ('.$db->addQuotes($prefix).', '.$db->addQuotes($uri).')');
	}

	public static function clearNamespaceMappings() {
		$db =& wfGetDB( DB_MASTER );
		$smw_nsmapping = $db->tableName('smw_nsmapping');
		$db->query('DELETE FROM '.$smw_nsmapping);
	}

	public static function setup($verbose) {
		TSCDBHelper::reportProgress("Setting up URI/namespace mapping storage ...\n",$verbose);
		self::setupURIMapping($verbose);
		TSCDBHelper::reportProgress(" ... done!\n",$verbose);
	}

	public static function drop($verbose) {
		global $wgDBtype;
		TSCDBHelper::reportProgress("Deleting all database content and tables generated by SMWTSC ...\n\n",$verbose);
		$db =& wfGetDB( DB_MASTER );
		$tables = array('smw_nsmapping', 'smw_urimapping');
		foreach ($tables as $table) {
			$name = $db->tableName($table);
			$db->query('DROP TABLE' . ($wgDBtype=='postgres'?'':' IF EXISTS'). $name, 'SMWSemanticStoreSQL2::drop');
			DBHelper::reportProgress(" ... dropped table $name.\n", $verbose);
		}

		TSCDBHelper::reportProgress("All data removed successfully.\n",$verbose);
		return true;
	}

	private static function setupURIMapping($verbose = false) {

		TSCDBHelper::reportProgress("   ... Creating URI mapping database \n",$verbose);
		global $wgDBname;
		$db =& wfGetDB( DB_MASTER );

		$table = $db->tableName('smw_urimapping');
		TSCDBHelper::setupTable($table, array(
                  'smw_id'              =>  'INT(8) UNSIGNED NOT NULL PRIMARY KEY' ,
                  'page_id'              =>  'INTEGER UNSIGNED NOT NULL ' ,
                  'smw_uri'       =>  'VARBINARY(255)'), $db, $verbose);

		TSCDBHelper::reportProgress("   ... done!\n",$verbose);

		TSCDBHelper::reportProgress("   ... Creating prefix/namespace mapping database \n",$verbose);
		global $wgDBname;
		$db =& wfGetDB( DB_MASTER );


		$table = $db->tableName('smw_nsmapping');
		TSCDBHelper::setupTable($table, array(
                  'smw_prefix'              =>  'VARBINARY(255) NOT NULL PRIMARY KEY' ,
                  'smw_uri'       =>  'VARBINARY(255)'), $db, $verbose);

		TSCDBHelper::reportProgress("   ... done!\n",$verbose);
	}

}
