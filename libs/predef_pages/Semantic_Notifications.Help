__NOTOC__
===Introduction===

In MediaWiki users can watch pages i.e. they get a notification email if the watched page is changed by someone else. 

This section describes the design and implementation of a new feature that extends the notification mechanism to semantic properties: Users are notified when semantic annotations have changed. The reason for a notification is defined as a query. The user is notified, when the result set of a query changes. This task is accomplished by a bot that is executed in regular intervals.

[[Image:Video_icon_small.png]] [[Semantic Notifications Video|Watch Video]]

===Database===

SMW's database has to be extended to store the queries of a user and the lastest set of results for each query. This can be achieved in a single new table:

{| border="1" cellpadding="5"
|- 
! colspan="7" | smw_sem_notification
|-
|INT (Primary Key) || VARCHAR(255) (Primary Key) || TEXT || MEDIUMTEXT || INT || VARCHAR(14)
|-
|user_id || query_name || query_text || query_result || update_interval || timestamp
|}


* With the <code>user_id</code> of type <code>INT</code>, the query is assigned to a user. The id is a foreign key into MediaWiki's <code>user</code> table.
*The name of the query is stored as a string with up to 255 characters.
* The text of the query is stored in ''ASK'' or ''SPARQL'' syntax in the column <code>query_text</code> which has the type <code>TEXT</code>.
*Each time the query is executed, the result has to be stored. The results of subsequent executions are compared to each other to find out the changes that are reported in a notification. The results are stored in an XML structure which will be described in detail in the following section.
*The user can specify an update interval, measured in days. The semantic notification bot is executed in the specified interval if it is not falling short of the minimal interval (see [[#Limitations|Limitations]]).
*The timestamp contains the time of the last update of the result set. Together with the interval the time for the next update can be calculated.

====Database: Implementation details====

*The database functionality is located in <code>SMW_SNStorageSQL.php</code>.
**The new database table <code>smw_sem_notification</code> is created in <code>SNStorageSQL::initDatabaseTables()</code>
**The function <code>SNStorageSQL::storeSN()</code> saves a semantic notification in the database.
**The function <code>SNStorageSQL::getSN()</code> retrieves a semantic notification in the database.
**<code>SNStorageSQL::deleteSN()</code> deletes a notification from the database.
* The database functions of <code>SNStorageSQL</code> are never called directly. The class <code>SemanticNotification</code> encapsulates the database access.
**An instance of <code>SemanticNotification</code> contains all properties of a semantic notification.
**An instance can be created with the normal constructor or with the static function <code>SemanticNotification::newFromName()</code>.
**An instance can be stored in the database with <code>SemanticNotification::store()</code>.
**The static function <code>SemanticNotification::deleteFromDB()</code> deletes a notification from the database.

===Storing query results===

The notification emails will contain the changes that have been made in the wiki's semantic annotations since the last notification. To achieve this, it is mandatory to store the latest results. They normally will have the structure of a table. This will be encoded in form of an XML string and stored in the database.

====XML structure====
<pre>
<?xml version="1.0"?>
<QueryResult>
    <table>
        <rows>number of rows</rows>
        <columns>number of columns</columns>
        <hash>a hashvalue over all results</hash>
	<columnnames>
	    <col>name of a table column</col>
            ...further column names...
        </columnnames>

    </table>
    <result>
       <row>
          <cell>content of a cell in the table</cell>
         ...further cells...
       </row>
       ...further rows with their cells...
    </result>
</QueryResult>
</pre>

This structure contains some meta data in the element <code><nowiki>table</nowiki></code> that will be used for a quick comparison of result sets and the notification e-mail:
* <code>rows</code>: The number of rows in the table.
* <code>columns</code>: The number of columns in the table. This value should never change if the query is not altered.
* <code>hash</code>: A hash value is calculated for all rows and columns of the result, even if the size of the result set as it is stored in the table is limited (see [[#Limitations|Limitations]])
* <code>columnnames</code>: A list of all column titles of the result set in the order of appearance in the table from left to right.

When result sets are compared, first the meta data is compared. If the numbers of rows and columns have not changed, the hash value of the current result set has to be calculated. If this differs from that of the foregoing result set, the semantic changes have to be elicited. If not, the result set has not changed.

Each row of the result table is stored in the <code>row</code> element that contains a <code>cell</code> element for each column. The cell contains the actual value. All values are escaped to avoid XML characters like &lt; etc.

The XML structure is optimized for comparing different versions. All rows are sorted for all columns. That means that the query is sent with an <code>ORDER BY column1, column2,...</code> statement. In order to find the changes between two versions, the rows can be compared in their order of appearance. This reduces the complexity from O(n²) to O(n log n).

'''Example'''
{| border="1" cellpadding="5"
!Old result set !! New result set
|-
|A||A
|-
|B||C
|-
|C||D
|-
|D||E
|}
In this example it is very easy to find out, that
* result ''A'' was not changed,
* ''B'' was removed
* and ''E'' was added.

;Alternative for large result sets
:All cells of a row can be encoded as a hash value. This can reduce the size of the result set considerably. The semantic notification bot can find out which annotations have been added and that annotations have been removed. But it can not show the details of the removed annotations. This solution could be a fallback system when the number of maximum rows for a notification has been exceeded (see [[#Limitations|Limitations]])
:'''Example:''' <code><nowiki><row hash="jfads098q34hpq09zfga43" /></nowiki></code>

=====Implement an XML query printer=====
SMW uses query printers in order to present the results of a query. A new query printer for the proposed XML syntax will be implemented.


====Maintaining the notification DB====
The following points are to be considered concerning the maintenance of the semantic notification database:
*Create a new query in the DB if the user creates a new query. Consider group and user limitations.
*If the user changes a query, the new query text is stored under the same query id. The result set of that query is deleted.
*If the user deletes a semantic notification the complete corresponding entry in the DB table is removed.


===Known Issues: Limitations===

The database for semantic notifications can quickly grow when many users are watching many queries with large result sets. Another problem besides the size of the database is the bot that handles the notifications. It can slow down the system considerably as it has to evaluate all queries of all users and compare the different versions of the result sets.

To avoid these problems, the wiki's administrator can limit the extent of semantic notification usage with three measures. In <code>SMW_SemanticNotificationSettings.php</code> the following restrictions can be specified:
* Number of semantic notification per user or user group. The value for  a user group overwrites the general one for users.
* Size of the result set in the DB (in bytes). Of course the quality of the notification message will be affected by this restriction (see [[#The notification message|The notification message]]).
* Minimal update interval in days. The semantic notification bot checks for changes in the periodical interval the user specified. The administrator can configure the minimal interval that the user can not go below.)

:'''Example'''
<pre>
$GLOBALS['smwgSemanticNotificationLimits'] = array(
    "allUsers" => array(
        "notifications" => 2, 
        "size" => 10000, 
        "min interval" => 7),
    "group Sysop" => array(
        "notifications" => 10, 
        "size" => 100000, 
        "min interval" => 3),
    "group SemanticGuru" => array(
        "notifications" => 100, 
        "size" => 1000000,
        "min interval" => 1)
);
</pre>

:In this example all users that are no ''Sysop'' and no ''SemanticGuru'' can define 2 notifications, the result set for each can have a size of up to 10000 bytes and the semantic notification bot checks for changes every 7 days at minimum. 

:Users in the group ''Sysop'' have 10 notifications at their disposal with a size of up to 100000 bytes in each result set and a minimum update interval of 3 days. 

:Users that belong to several groups get the maximum of all <code>notifications</code> and <code>size</code> and the minimum of the <code>min interval</code>. So a ''Sysop'' who is also a ''SemanticGuru'' has 100 notifications with a size of up to 1000000 bytes for each one and receives notifications every day if something has changed.


===The notification message===

Semantic notifications can only be delivered, if the user has provided his email address. The [[#The semantic notification bot|semantic notification bot]] will check in certain intervals if notification emails have to be sent due to changes in the semantic annotations.

The notification email consists of the following content:

* Name of the user
* Name of the notification
* Query of the notification
* A table of changed rows from the result set
** Values of added annotations
** Values of removed annotations
** Values of changed annotations (old and new value)
*A link to the definition of the notification in the wiki

Limited storage of the result sets (see [[#Limitations|Limitations]]) affects the notification about semantic changes. They can no longer be listed to the full extent. Changes may only be detected by the changed number of rows in the result set and the corresponding hash value. The notification message must point out this clearly e.g. 
:''The semantic annotations that you are watching have been changed. However, due to a very large result set the concrete changes can not be listed. At least 5 results have changed. ''
:''Please contact your wiki's administrator if detailed change descriptions are essential for you.''



===The semantic notification bot===

A new bot that checks and sends semantic notifications has been developed.

*The bot is started in regular intervals to process the notification request of all users. This is achieved by a cron job (Linux etc.) or a scheduled task (Windows).
*The bot 
**reads all notification requests of all users
**executes the queries
**compares the new results with the previous results (see [[#XML structure|XML structure]])
**stores the latest results in the DB
**sends the notifications for changed semantic annotations
**considers the administrator's limitations (see [[#Limitations|Limitations]])

=== Implementation ===
====Files and classes====

The implementation files are located in <code>extensions/SMWHalo/specials/SMWSemanticNotifications</code>. The files are only included, if semantic notifications are enabled (see [[#Enabling the Semantic Notification|Enabling the Semantic Notification]] and [[Enabling_the_Semantic_Notifications|Enabling the Semantic Notifications since Release 1.4.3]]).

* <code>SMW_SemanticNotificationManager.php</code> is the main entry file for the semantic notifications. It provides the main class <code>SemanticNotificationManager</code>.
* <code>SMW_SemanticNotification.php</code> contains the class <code>SemanticNotification</code> for the definition of a semantic notifications, comparison of query result sets and sending notification messages.
* <code>SMW_SemanticNotificationSettings.php</code> contains the settings that configure the semantic notification extension (see [[#Configuring the Semantic Notification Extension|Configuring the Semantic Notification Extension]]).
* <code>SMW_SNStorage</code> defines the class <code>SNStorage</code>, which is a singleton that provides access to the actual database object that stores all data concerning the semantic notification extension.
* <code>storage/SMW_SNStorageSQL.php</code> defines the class <code>SNStorageSQL</code> that creates and accesses the MySQL database tables of the semantic notification extension.
* <code>SMW_QP_SNXML.php</code> contains the query result printer that generates the XML serialization.
* <code>SMW_SemanticNotificationMessages.php</code> contains the language dependent messages for the user interface. Additional translations can be added in this file.
* <code>SMW_SemanticNotificationSpecial.php</code> defines the special page ''Special:SemanticNotifications'' where the user can manage his semantic notifications.
* <code>SMW_SNAjax.php</code> contains the Ajax callback functions that are invoked by the special page.
* <code>SMW_SemanticNotificationBot.php</code> contains the notification bot. It is run by the scriptable bot starter in regular intervals.

====Additional Files in SMW+ v1.4.3, Halo Extension v1.4.3====
* <code>scripts</code> contains the JavaScript files that are needed for the special page. New translations can be added to the sub-folder <code>Language</code>.
* <code>skins</code> contains the stylesheets and the images for the user interface.

====Semantic Notifications and the Query Interface====

From the special page ''Special:SemanticNotifications'' the Query Interface can be invoked, to create a query for the notification. The Query Interface has to pass the query text to the SemanticNotifications. To achieve this, the cookie <code>NOTIFICATION_QUERY</code> is set by the Query Interface before the browser shows ''Special:SemanticNotifications''. This page then checks if the cookie is available, sets its content as query and deletes the cookie.

==== Known Limitations ====
<hr>
<b>Note &ndash;</b> Cookies must be allowed by the browser.
<hr>

===Administration===
This section explains the configuration of the semantic notification.

====Enabling the Semantic Notification====
The Semantic Notification extension is enabled in <code>LocalSettings.php</code>. The  variable <code>$smwgEnableSemanticNotifications</code> must be set <code>true</code> before the <code>enableSMWHalo()</code> is called:
<pre>
$smwgEnableSemanticNotifications = true;
</pre>

[[Enabling_the_Semantic_Notifications|Enabling the Semantic Notifications since Release 1.4.3]]

====Setting up the Semantic Notification Bot====

The semantic notification bot is a PHP script, that shouldto be executed in regular intervals. (However, it can be started manually.) In the Windows OS this can be achieved "Scheduled Tasks". To open Scheduled Tasks, click ''Start'', click ''All Programs'', point to ''Accessories'', point to ''System Tools'', and then click ''Scheduled Tasks''.

To schedule the bot as a new task:
#Double-click ''Add Scheduled Task'' to start the Scheduled Task Wizard, and then click ''Next'' in the first dialog box.
#Click ''Browse'', click the folder and file that you want to schedule i.e. <code>C:\Programme\XAMPP\php\php.exe</code>, and then click ''Open''.
#Type a name for the task e.g. ''Semantic Notification Bot'', and then choose ''Daily'' 
#Click ''Next'', specify the information about the day and time to run the task, and then click ''Next''.
#Type the name and password of the user who is associated with this task. Make sure that you choose a user with sufficient permissions to run the program. By default, the wizard selects the name of the user who is currently logged on.
#Click ''Next'', and then click ''Finish'' after you verify the choices that you have made.
#The task appears in the list of ''Scheduled Tasks''. Open its properties. In the ''Task'' tab you have to change the fields ''Execute'' and ''Execute in'' (adapt to your own paths):
::;Execute
::: <code>C:\Programme\XAMPP\php\php.exe SMW_startBot.php -b smw_semanticnotificationbot</code>
::;Execute in
:::<code>C:\Programme\MediaWiki\HaloSMWExtension\extensions\SMWHalo\maintenance</code>

====Setting the notification limitations====

The extension can be configured in the file <code>SMW_SemanticNotificationSettings.php</code> with the following variables:
* $GLOBALS['smwgSemanticNotificationLimits'] (see [[#Limitations|Limitations]])

====Settings for sending e-mails====

To be able to send notification e-mails, the e-mail settings have to be provided in <code>LocalSettings.php</code>:
<pre>
$wgSMTP = array(
 'host'     => "smtp.your-provider.com",
 'IDHost'   => "domain for MessageID",
 'port'     => 25,
 'auth'     => true, 
 'username' => "your username",
 'password' => "your password"
);

</pre>


[[Category:SMW+ Help Topic|Semantic Notifications]]
[[SubsectionOf::Help:Administration| ]]
