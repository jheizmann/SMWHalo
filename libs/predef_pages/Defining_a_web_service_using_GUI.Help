__NOTOC__

===Preconditions===
First [[Enabling_the_Data_Import_Extension|enable the Data Import Extension]]


===General===
There are two ways for defining a Wiki Web Service Description (WWSD) for the web service you like to use:
* this How-to describes how you can define a WWSD '''using the user-friendly GUI for Wiki Web Service Definition (WWSD)''' 
* '''for defining a WWSD manually''', go to [[Defining a web service using the WWSD syntax|How to define a web service using WWSD syntax]]


===The GUI for defining a WWSD===
The special page ''Special:Define Web Service'' provides a graphical user interface for defining a WWSD which you can use instead of manually defining a WWSD. 


The process of defining a WWSD in this user interface consists of six steps. The breadcrumb menu on top of the user interface shown in Figure 1 visualizes these steps. This menu will also show you in which step of the process you are at the moment. A short help text for each step will be displayed if you click on the blue help icon displayed for each step.


=== Step 1: Define credentials ===

[[Image:defgui-s1.png|center|thumb|933px|'''Figure 1:''' Define credentials]]

In the first step you have to choose if you like to define a WWSD for a SOAP or for a RESTful web service and you have to enter the URI of the web service. If you define a WWSD for a SOAP web service, then the URI has to point to a WSDL description of the web service. The GUI will then try to extract the information about available methods, necessary parameters and possible result parts for defining the WWSD automatically from the WSDL of the web service. Otherwise if you like to use a RESTful web service then the URI has to point directly to the web service itself and no automatic extraction of information about necessary parameters and result parts will be available. If the web service requires authentication then you can enter a username and a password. 

<hr>
<b>Note &ndash;</b> Now only a basic HTTP authentication is supported.
<hr>


=== Step 2: Select method ===

[[Image:defgui-s2.png|center|thumb|933px|'''Figure 2:''' Select method]]

In this step you have to choose which method you like to use.

==== SOAP ====
SOAP web services may provide several methods which in turn deliver different results. In this step, shown in Figure 2, you have to choose one of the methods provided by the web service in the drop-down menu. The web service support in this wiki does allows collecting results from only one method of the web service. If you want to access results from different methods of the same web service, you have to create one WWSD for each method.

==== RESTful ====
For RESTful web services you can only choose between the two methods ''get'' and ''post'', which correspond to the HTTP-post respectively HTTP-get requests.


=== Step 3: Define parameters ===

In this step you have to define the parameters which will be used for calling the web service later. 

==== SOAP ====

[[Image:defgui-s3-soap.png|center|thumb|933px|'''Figure 3a:''' Define parameters for a SOAP web service]]

Each parameter is identified by a path, which addresses it in the parameter type hierarchy. You can browse the possible parameters by expanding and collapsing the type hierarchy in the tree view shown in Figure 3a below. Sometimes it is not necessary to pass a value for each parameter when calling a web service. You have to activate the checkbox in the use-column of a parameter, if you like to include it into the WWSD, so that users later are able to provide a value for that parameter when calling the web service. (Usually you have to include all parameters.) For each parameter you like to use, you have to specify an alias which later will be used instead of the long path to address the parameter. You also can specify if a parameter will be optional when users later call the web service. If a parameter is not optional, then users will receive an error message if they call the web service without passing a value for that parameter. At last you can define a default value for a parameter. This default value will be used if a parameter is not optional and if no value for that parameter was passed to the web service call. 


==== RESTful ====

[[Image:defgui-s3-rest.png|center|thumb|933px|'''Figure 3b:''' Define parameters for a RESTful web service]]

If the web service needs some parameters then you have to click on the ''add parameters'' butoon so that the interface for defining parameters which is shown in Figure 3b will be displayed. At first you have to enter the path of the parameter. If you do not enter a path for a parameter, then this parameter will not be included into the WWSD. After that you can enter an alias for the parameter which later will be used to address the parameter when calling the web service in a Wiki article. If you do not provide an explicit alias, then the parameter path will be used as alias. You also can specify if a parameter will be optional when users later call the web service. If a parameter is not optional, then users will receive an error message if they call the web service without passing a value for that parameter. At last you can define a default value for a parameter. This default value will be used if a parameter is not optional and if no value for that parameter was passed to the web service call.


=== Step 4: Choose result parts ===
Now you have to specify the parts of the result you would like to display in your wiki articles when you later will call the method of the web service. This works similar to defining parameters.

==== SOAP ====

[[Image:defgui-s4-soap.png|center|thumb|933px|'''Figure 4a:''' Choose result parts for a SOAP web service]]

In this step shown in Figure 4a you have to define which parts of the result returned by the web service users can display in Wiki articles. Each result part is identified by a path, which addresses it in the result type hierarchy. You can browse the possible result parts by expanding and collapsing the type hierarchy in the tree view above. You have to activate the checkbox in the use-column of a result part, if users later should be able to use it in a Wiki article when calling the web service. For each result part you like to use, you have to specify an alias which later will be used instead of the long path to address the result part. Sometimes result parts contain information encoded in XML or JSON. It often does not make sense to display the encoded information in Wiki articles. Therefore you can add subpaths to result parts that help you to extract the relevant information. A subpath can have the JSON or XPath format. (The actual version of the Data import extension only supports the XPath format.) In the path column you have to enter the path to the information you like to extract. You also have to provide an alias for each subpath.

==== RESTful ====

[[Image:defgui-s4-rest.png|center|thumb|933px|'''Figure 4b:''' Choose result parts for a RESTful web service]]

RESTful web services return a string as their result. if you want to allow users to display that string in Wiki articles, then you have to activate the checkbox for using the complete result shown in Figure 4b below. By default the alias ''complete'' will be used for that result part but you can change this if you like. But the result returned by the web service often also contains further structured data encoded in a format like JSON or XML. If you like to define further result parts for the structured content, then you have to click on the ''add result parts button''. Now you have to define which parts of this result users can display in Wiki articles. At first you have to enter an alias for each result part. This alias will later be used to address the result part when the web service is used in an article. If you do not specify an alias, then a random one will be created. Now you have to define if the path you like to use for extracting result parts has the JSON or the XPath format. (Note: The Data import extension supports only the XPath format at the moment.) Now you can enter the path which will be used to extract the result part from the complete result.


=== Step 5: Define update policy ===

[[Image:defgui-s5.png|center|thumb|933px|'''Figure 5:''' Define update policy]]

The update policies define the time period after which a value delivered by a web service will be updated. The ''display policy'' will be relevant whenever a value is displayed in an article, whereas the ''query policy'' is only relevant for semantic queries. 

The ''delay'' value (in seconds) is applied between two calls of a web service. So you can prevent, that the service is called too often in a short time, which may violate the terms of use of the web service provider. 
The ''span of life'' defines how long a result of a web service call will be kept in the cache. If you do not provide a value for the span of life, then the value will be kept in the cache for an unlimited time span. At last you can choose if the age of cached results will be reset if they are updated or after their last access (e.g. by viewing an article).


=== Step 6: Save WWSD ===

[[Image:defgui-s6.png|center|thumb|933px|'''Figure 6:''' save WWSD]]

In order to use the web service you need to name it. Please use a meaningful name that makes it easy for other users to recognize the purpose of this web service.


=== Result view ===

[[Image:defgui-s7.png|center|thumb|933px|'''Figure 7:''' Result view]]

After you have walked successfully through the six steps for creating a WWSD, the WWSD will be created and added to the list of available WWSDs. Like shown in Figure 7, the syntax for using this web service within a wiki article will be presented to you. You can now define another WWSD. Simply click the ''New'' button for that purpose.


=== Editing a WWSD in the graphical user interface ===

[[Image:defgui-edit.png|center|thumb|933px|'''Figure 8:''' Editing an existing WWSD]]

You can also edit an existing WWSD in the graphical user interface. The same graphical user interface which is used for defining a WWSD will be used for that purpose. You can edit an existing WWSD by clicking on the link <i>Please click here to edit the WWSD in the graphical user interface.</i> which is shown at the bottom of a WWSD article. If you click on that link, the GUI for defining a WWSD will be opened, all six steps of the GUI will be expanded and they will be filled with content from the WWSD.

If you edit the WWSD of a SOAP web service and if you manually added some result part definitions to the WWSD, then step 4 of the GUI will be shown slightly different than when you define a WWSD like shown in Figure 8 below. Below the tree view for defining result parts, your manually defined result parts will be shown if their path attribute does not match to the paths handled by the tree view. The reason for that is that the Web Services component allows you to use XPath statements for the path-attribute and it is obvious that some XPath statements can not be visualized in a tree view.



=== Known issues ===
In some cases, for example, if array types for web service calls are not defined by extending the array type defined in the Soap v1.1 encoding schema like it is proposed in the WSDL 1.1 specification, the GUI will not be able to determine the correct characteristics of these types. In this case you will have to read the documentation of the Web Service and to modify the textual representation of the WWSD which was created by the GUI on your own. (This is only an issue for parameters. Result parts do not have that problem any more.)

Some Web Services like the Amazon Web Service define a huge amount of parameter types and result part types for their Web Service. This leads to a very slow behaviour of the Steps 3 and 4 of the GUI. Even if the GUI seems to freeze in these cases, please do not worry and wait a few seconds until the background processes have finished.


<hr>
<b>Note &ndash;</b> Before you can use the web service, an administrator has to [[Web Services#The Web Service Repository|'''confirm''']]
the WWSD you have defined.   
<hr>

Now you are able to embed web service calls into wiki articles. You can do that [[Embedding_web_services_in_articles_manually |'''manually''']] or via the 
[[Embedding_web_services_in_articles_using_GUI |'''Use Web Service GUI''']]



While the web service is used, Administrators can take care about updating and 
caching of web service results by using the [[Web Services#Web Service cache cleanup bot|'''cache cleanup bot''']], 
the [[Web Services#Web Service update bot|'''update bot''']] and the special page [[Web Services#The Web Service Repository|''' Web Service Repository''']].


[[Category:SMW+ Help Topic|Web Service]]
[[SubsectionOf::Help:End User| ]]