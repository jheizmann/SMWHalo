{{Helppage
|question=How can I define a web service?
|answer=Use the special page "Define Web Service".
|audience=Administrator
|component=semantic MediaWiki
|discourseState=Main:view
}}

=== Introduction ===
The Web Service extension allows you to call external Web Services and to integrate the results of those calls directly into your wiki articles. In order to use an external Web Service you first have to define a WWSD (Wiki Web Service Definition), which describes how this Web Service can be used. After that you can call this Web Service and display its result within a wiki article.

=== Special:Define Web Service ===
The special page ''Special:Define Web Service'' provides a graphical user interface for defining a WWSD which you can use instead of manually defining a WWSD. The GUI will try to extract the necessary information for defining the WWSD from the WSDL (Web Service Description Language) of the Web Service.  

==== Overview ====
The process of defining a WWSD in this user interface consists of six steps. The bread crump menu on top of the user interface shown in Figure 1 shows these steps. This menu will also show you in which step of the process you are at the moment. A short help text for each step will be displayed at the bottom of the page.

==== Step 1: Specify the URI of the WSDL ====
In the first step you have to enter the URI of the WSDL, which describes the Web Service. If you do not have an URI yet, you can search for different Web Service providers on the internet. Please take a look at Web Service Search Engines in order to find what you are looking for.

[[Image:Define_web_service_step_1.png|center|thumb|933px|'''Figure 1:''' Specify the URI of the WSDL]]

==== Step 2: Select a method of the Web Service ====
Each Web Service may provide several methods which in turn deliver different results. In this step, shown in Figure 2, you have to choose one of the methods provided by the Web Service in the drop-down menu. The Web Service support in this wiki does allows collecting results from only one method of the Web Service. If you want to access results from different methods of the same Web Service, you have to create one WWSD for each method.

[[Image:Define_web_service_step_2.png|center|thumb|933px|'''Figure 2:''' Select one of the methods provided by the Web Service]]


==== Step 3: Define parameters ====
Now you have to define the parameters which will be used for calling the method of the Web Service. Each parameter is addressed by a unique path within the type hierarchy. You can browse the type hierarchy by expanding respectively collapsing the subtypes in the tree view shown in Figure 3. For each parameter you wish to use, you have to specify an alias which you can later use to address the parameter. If you do not want to use a parameter for the method call, you have to leave the corresponding alias input field empty. If you like to save time you can press the pencil icon in the head of the alias column for automatic alias generation. You also can specify if a parameter will be optional when you later will call the Web Service. At last you have the possibility to define a default value for a parameter which will be used for the Web Service call in case you do not provide a value for the parameter. 

[[Image:Define_web_service_step_3.png|center|thumb|933px|'''Figure 3:''' Define the parameters for the Web Service call]]


==== Step 4: Define parts of the result ====
Now you have to specify the parts of the result you would like to display in your wiki articles when you later will call the method of the Web Service. This works like defining parameters, except that you do not need to decide if the result parts are optional and you do not have to provide a default value.

[[Image:Define_web_service_step_4.png|center|thumb|933px|'''Figure 4:''' Specify the result parts of the Web Service call]]


==== Step 5: Define update policies ====
The update policies define the time period after which a value delivered by a Web Service will be updated. The ''display policy'' will be relevant whenever a value is displayed in an article, whereas the ''query policy'' is only relevant for semantic queries. 

The ''delay'' value (in seconds) is applied between two calls of a Web Service. So you can prevent, that the service is called too often in a short time, which may violate the terms of use of the web service provider. 
The ''span of life'' defines how long a result of a Web Service call will be kept in the cache. If you do not provide a value for the span of life, then the value will be kept in the cache for an unlimited time span. At last you can choose if the age of cached results will be reset if they are updated or after their last access (e.g. by viewing an article).

[[Image:Define_web_service_step_5.png|center|thumb|933px|'''Figure 5:''' Define the update policies]]


==== Step 6: Specify a name for the WWSD ====
In order to use the Web Service you need to name it. Please use a meaningful name that makes it easy for other users to recognize the purpose of this Web Service.

[[Image:Define_web_service_step_6.png|center|thumb|933px|'''Figure 6:''' Name the Web Service]]


=== Result View ===
After you have walked successfully through the six steps for creating a WWSD, the WWSD will be created and added to the list of available WWSDs. Like shown in Figure 7, the syntax for using this Web Service within a wiki article will be presented to you. You can now define another WWSD. Simply click the round button with the triangle.

[[Image:Define_web_service_step_7.png|center|thumb|933px|'''Figure 7:''' The WWSD has been successfully created and the syntax for using the Web Service is displayed]]


=== Known Issues ===
In some cases, for example, if array types for Web Service calls are not defined by extending the array type defined in the Soap v1.1 encoding schema like it is proposed in the WSDL 1.1 specification, the GUI will not be able to determine the correct characteristics of these types. In this case you will have to read the documentation of the Web Service and modify the textual representation of the WWSD which was created by the GUI on your own.

Some Web Services like the Amazon Web Service define a huge amount of parameter types and result part types for their Web Service. This leads to a very slow behaviour of the Steps 3 and 4 of the GUI. Even if the GUI seems to freeze in these cases, please do not worry and wait a few seconds until the background processes have finished.
