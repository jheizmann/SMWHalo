__NOTOC__
A convenient method for the storage and retrieval of Resource Description Framework (RDF) statements in a relational database is the so-called triple store. The RDF data model is based upon the idea of making statements about Web resources in the form of subject-predicate-object expressions, called ''triples'' in RDF terminology. A collection of RDF statements intrinsically represents a labeled, directed multi-graph. The predominant query language for RDF graphs is SPARQL (an acronym that stands for ''Simple Protocol and RDF Query Language'').

SMW+ provides connectors to the following triple stores:

* [http://www.ontoprise.de/en/home/about-us/contact/ OntoBroker Triple Store Connector] (Contact Ontoprise) 
* [http://downloads.sourceforge.net/halo-extension/ Jena Triple Store Connector] (Download from SourceForge)

== Requirements ==

* Java Runtime Environment 1.6

== Installation ==

To install the triple store connector, proceed as follows:

<div style="font-weight:bold; line-height: 2;">
<ol>
<li>Download the triple store connector.<br>
<div style="font-weight:normal;">Download the triple store connector and extract the ZIP archive in a directory of your choice.
</div></li>
<li>Start the triple store connector.<br>
<div style="font-weight:normal;">Open a command-line interface and start the connector with the following option:

<tt>C:\ts-connector-jena><b>start-triplestore jena</b></tt>

This starts a triple store connector with embedded message broker and a SPARQL endpoint on localhost.<br>
It has started properly if you see a command prompt waiting for commands. Try to enter <tt>help</tt>.<br>
By default, it uses the RAM datamodel. If you want to use a MySQL backend for Jena,<br>
take a look at <tt>config/jena.properties</tt> and set <tt>DB_TYPE=MySQL</tt>.<br>
Note that you must have installed a MySQL database. Finally, change your DB credentials in this configuration file.
</div></li>
<li>Change your wiki settings.<br>
<div style="font-weight:normal;">Depending on the used storage layer, change the <tt>enableSMWHalo</tt> call to:
<pre>
enableSMWHalo('SMWHaloStore2', 'SMWTripleStore', 'http://halowiki');
</pre>
The string "<nowiki>http://halowiki</nowiki>" is used to uniquely identify the wiki in the triple store.<br>
Basically any value is possible, but make sure that it does <em>not</em> contain a hash character (#).<br>
If no value is specified, "<nowiki>http://mywiki</nowiki>" will be used as default.

In addition, add the following lines to your <tt>LocalSettings.php</tt> (supposed that the triple store runs on localhost, otherwise use the IP address):
<pre>
$smwgMessageBroker = "localhost";
$smwgWebserviceEndpoint = "localhost:8080"; 
</pre>
</div></li>
<li>(Optional) Provide webserver access credentials.<br>
<div style="font-weight:normal;">If you have a webserver access restriction set (e.g., <tt>.htaccess</tt>), you must add a pair of valid credentials:
<pre>    
$smwgWebserviceUser = "username";
$smwgWebservicePassword = "password";
</pre>
</div></li>
<li>Go to the page Special:TSA.<br>
<div style="font-weight:normal;">Click Initalize.
</div></li>
<li>Return to page Special:TSA.<br>
<div style="font-weight:normal;">In the Status section you should see a green message indicating that the wiki is properly connected to the triple store.
[[Image:Triple_store_administration.png|none|thumb|300px|Triple Store Administration]]
</div></li>
</ol>
</div>

== Testing Your Installation ==

<div style="font-weight:bold; line-height: 2;">
<ol>
<li>Start the triple store connector.<br>
<div style="font-weight:normal;">Open a command-line interface and start the triple store connector with the <tt>console</tt> option:

<tt>C:\ts-connector-jena><b>start-triplestore jena console</b></tt>

[[Image:Triple_store_connector_console.png|none|thumb|300px|Triple Store Connector]] 
</div></li>
<li>Check if your wiki was imported properly.<br>
<div style="font-weight:normal;">Execute the following two commands on the console:
  
<tt>C:\ts-connector-jena><b>SET GRAPH <nowiki>http://halowiki</nowiki></b></tt><br>
<tt>C:\ts-connector-jena><b>SHOW ALL</b></tt>

Use the URL you have specified in the <tt>enableSMWHalo</tt> call.
    
You should see all triples of your wiki.

You may terminate now by entering <tt>quit</tt> and restart without the <tt>console</tt> option.</div></li>
</ol>
</div>

== Datamodel ==

By default, the triple store connector uses the RAM datamodel. If you want to use a persistent model (MySQL), you have to edit the <tt>config/jena.properties</tt> file.

<pre>
DB_HOST=<database host>
DB_DATABASE=<database where the semantic data should be stored>
DB_USER=<user name which has read/write access to the given database>
DB_PASSWORD=<user password>
DB_TYPE=MySQL
DB_DRIVER=com.mysql.jdbc.Driver
</pre>
<hr>
<b>Note &ndash;</b> Notice that if the given user does not have the required privileges to create a database, the database must already exist.
<hr>


== Troubleshooting ==

This section gives a brief overview of possible error sources if the triple store connector does not work as desired:
* '''Database Timeout.''' MySQL has a default timeout for inactive connections of eight hours. That means, if there is no access on the triple store connector for more than eight hours, the connector will stall. You may increase this value by executing the following command on the MySQL console:<br> 
:<tt>SET wait_timeout=<time in seconds>;</tt>
* '''PHP SOAP Extension.''' The triple store connector requires the PHP extension SOAP to be installed. If you don't use the PHP settings provided by the XAMPP installation, make sure that the variable <tt><nowiki>extension=php_soap.dll</nowiki></tt> in the PHP configuration file <tt>php.ini</tt> is set. If PHP and SOAP is not working correctly you will probably get an empty page when trying to configure the triple store connector in your wiki at the special page <tt>Special:TSA</tt> (Triple Store Administration).

If the triple store connector is correctly installed and running you should be able to open an connection via telnet to the triple store connector.

<tt>Command prompt><b>telnet localhost 8080</b><br>
Trying 127.0.0.1...<br>
Connected to localhost.<br>
Escape character is '^]'.<br></tt>

In case you get the error message "Connection refused", the triple store connector is not running.

=== Debugging ===

The triple store connector has a debugging console. It can be activated by using the <tt>console</tt> option at startup.

<tt>C:\ts-connector-jena><b>start-triplestore jena console</b></tt>

There are many commands available for creating graphs, inserting facts, and starting queries (SPARQL+ASK). For a complete overview of all commands, enter <tt>help</tt> on the console prompt.

=== Logging ===

By default, the triple store connector (&ge; 0.31) writes a log file (<tt>tsc.log</tt>). If you experience problems, please take a look at this file. The default log level is <tt>INFO</tt> but you may change this to <tt>DEBUG</tt> in the <tt>log4j.properties</tt> file.

== Queries ==

=== SPARQL Queries ===

A triple store enables you to query the wiki via the SPARQL language. For example, you might want to query the wiki for a list of all articles that are annotated with the <tt>WasWrittenBy</tt> property. More precisely, the wiki should display a list of all books pages and their corresponding author pages whose title contains the string "Shak":
<pre>
{{#sparql: SELECT ?book ?author WHERE {?book prop:WasWrittenBy ?author . FILTER regex(str(?author), "Shak") .  } }}
</pre>
The rendered article will then display a table showing the results.
[[Image:Sparql_query.png|none|thumb|400px|SPARQL Query]]

The following prefixes are predefined and do not need to be specified manually if you run an inline query:

<table border="0" style="background-color:#FFFFFF;" width="50%" summary="Parameters of the generateTree Parser Function">
    <tr>
	<th style="border-top-width:1px; border-top-style:solid; border-top-color:#000;" colspan="3"></th>
    </tr>
    <tr>
	<th style="text-align:left;">Namespace</th>
	<th style="text-align:left;">URI</th>
        <th style="text-align:left;">Resource</th>
    </tr>
    <tr>
	<th style="border-top-width:1px; border-top-style:solid; border-top-color:#000;" colspan="3"></th>
    </tr>
    <tr>
	<td><tt>cat</tt></td>
	<td><tt><nowiki><http://halowiki/category#></nowiki></tt></td>
        <td>Categories</td>
    </tr>
    <tr>
	<td><tt>prop</tt></td>
	<td><tt><nowiki><http://halowiki/property#></nowiki></tt></td>
        <td>Properties</td>
    </tr>
    <tr>
        <td><tt>a</tt></td>
	<td><tt><nowiki><http://halowiki/a#></nowiki></tt></td>
        <td>Articles / Instances</td>
    </tr>
    <tr>
	<td><tt>rdf</tt></td>
	<td><tt><nowiki><http://www.w3.org/1999/02/22-rdf-syntax-ns#></nowiki></tt></td>
        <td>RDF Resources</td>
    </tr>
    <tr>
	<th style="border-top-width:1px; border-top-style:solid; border-top-color:#000;" colspan="3"></th>
   </tr>
</table>

You may use all SPARQL language contructs although it depends from the actual driver implementation if all features are supported (the OntoBroker triple store does <em>not</em> support all SPARQL language contructs).

In addition, you may add various printout statements. Their function in SPARQL queries is to change the label of a column. For example:
<pre>
{{#sparql: SELECT ?x ?y WHERE {?x rdf:type cat:Book . ?x prop:WasWrittenBy ?y . }|?x=Book|?y=Author }}
</pre>
For more information on SPARQL, see the [http://www.w3.org/TR/rdf-sparql-query/ SPARQL specification].

=== ASK Queries ===

ASK queries inside the parser function <tt>#sparql</tt> get automatically translated into SPARQL. The query syntax should be fully ASK compatible. However, only the following parameters will work for sure:

* <tt>limit</tt>
* <tt>offset</tt>
* <tt>sort</tt>

For example:
<pre>
{{#sparql: [[category:Book]][[WasWrittenBy::+]]|?WasWrittenBy=Author|limit=10  }}
</pre>

For more information on queries that make use of the <tt>#ask</tt> parser function, see [[Help:Inline_queries|Inline Queries]].

[[Category:SMW+ Help Topic|Triple Store Connector]]
[[SubsectionOf::Help:Knowledge_Retrieval| ]]