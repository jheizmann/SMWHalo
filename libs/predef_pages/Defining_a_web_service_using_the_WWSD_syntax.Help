__NOTOC__

===Preconditions===
First [[Enabling_the_Data_Import_Extension|enable the Data Import Extension]]

===General===
There are two ways for defining a Wiki Web Service Description (WWSD) for the web service you like to use:
* this How-to describes how you can define a WWSD '''manually using the Wiki Web Service Definition (WWSD) syntax''' 
* '''for defining a WWSD with user-friendly GUI''', go to [[Defining_a_web_service_using_GUI|How to define a web service using GUI]]

===What is WWSD?===
Before a web service can be used in the wiki, it has to be defined. Each web service is defined in a dedicated article that belongs to the namespace '''WebService'''. The web service is defined in an XML syntax with special tags that are described below. This is called the '''Wiki Web Service Definition (WWSD)'''. The rest of the defining article may contain arbitrary wiki text like examples for the usage of the service. 

The system adds further sections to the article containing the WWSD:
* An alphabetical list of all '''articles that use the web service'''.
* An alphabetical list of all '''semantic properties that get their value from the web service'''.
* A list of '''warnings and error messages''', if the entered WWSD does not match the requirements.


<hr>

===Description of the WWSD syntax===

===webservice=== 

<code><nowiki><webservice></nowiki></code>
This tag surrounds the whole definition of the web service. Each web service has a unique name in the wiki i.e. the name of the article that contains the WWSD (without the namespace '''WebService'''). The web service can be accessed by this name in wiki articles.

'''Example'''
<pre>
<webservice>
(Definition of the web service)
</webservice>
</pre>

<hr>

===uri===
<code><nowiki><uri name="URI of the web service" /></nowiki></code>

For SOAP web services, this tag specifies the URI of the web service's WSDL description. For RESTful web services this must be the URI of the web service itself. Only one URI must be specified in a WWSD.

'''Example'''
<pre>
<uri name="http://weather.example.com/weather.wsdl" />
</pre>

<hr>

===protocol===
<code><nowiki><protocol>SOAP/REST</protocol></nowiki></code>

This tag specifies the protocol of the web service. Two values are allowed: SOAP or REST.

===method===
<code><nowiki><method name="name of the method" /></nowiki></code>

For SOAP web services this must be the name of one of the web service's method that is called. For RESTful web services only two values are allowed: Get and post which correspond to the HTTP-get respectively HTTP-post method. Only one method must be specified in a WWSD.

'''Example'''
<pre>
<method name="getTemperature" />
</pre>

<hr>

===authentication===
<code><nowiki><authentication type="http" login="value" password="value"/></nowiki></code>

The authentication tag is optional and can be left out, if no authentication is needed in order to access the web service. The type of the authentication mechanism is specified by the '''type''' attribute. The only authentication type which is supported at the moment is the basic HTTP-authentication.

'''Example'''
<pre>
<authentication type="HTTP" user="admin" password="secure"/>
</pre>

<hr>

===parameter===
<code><nowiki><parameter name="paramName" defaultValue="value" optional="true/false" path="/a/b/c" /></nowiki></code>

The parameters are defined with these attributes:
* '''name''' is the identifier for the parameter that is used when the web service is used in an article e.g. <code><nowiki>{{#ws:example | paramName=42}}</nowiki></code>
* the '''defaultValue''' is passed to the web service, if no other value is specified when the web service is used in an article (the default value will only be used if the parameter is not optional)
* a parameter may be '''optional''' (<code>true</code>) or required (<code>false</code>). If no value is given for a required parameter, an error is reported. However, values might be provided as '''defaultValue'''. The default value of this tag is <code>false</code>.
* the '''path''' specifies 
** for SOAP web services the exact location of the parameter in the parameter type hierarchy. A subset of the XPath syntax is used for that purpose. First, paths in that XPath subset always have to start at the root of the parameter type hierarchy. Second, only the descendant axes <code>/</code> is allowed when traversing the parameter type hierarchy. You can use squared brackets and an index to denote elements of array types. No other features of the XPath language are supported for parameters. A resulting parameter path then may look like: <code>/cityWeather/zipCode</code>
** for RESTful web services simply the name of a parameter. A RESTful web service for example that is accessible via the URL <code>http://api.localhost?query=population&format=XML</code> has the two parameters 'query' and 'format'. Therefore you must specify two parameters for that web service in the WWSD. One has the path 'query' and the other one has the path 'format'. 


'''Example'''
<pre>
<parameter name="zipCode" defaultValue="98101" optional="false" path="/cityWeather/zipCode" />
</pre>

<hr>

==== Special purpose parameters for RESTful web services ====
For RESTful web services in general there exist a special purpose parameter named <code>__rest__uri</code>. For RESTful web services that use the post-method there is also the special purpose parameter <code>__post__user_agent</code> available. If you use one of those parameters where they are not appropriate, e.g. for SOAP web services, then they will be treated like common parameters which may lead to errors.

* The value of the <code>__rest_uri</code> parameter will be appended to the URI of the web service. This for example is useful for a lot of RSS feeds. Most of them do not need any parameters and the same result part definitions are appropriate for them. The only difference between them is therefore their URI. With the <code>__rest_uri</code> parameter you can define a WWSD for RSSFeeds with the URI <code>http://</code> and then you can pass the rest of the URI to the web service call via the <code>__rest_uri</code> parameter.
* The <code>__post_user_agent</code> parameter allows you to handle RESTful web services that behave differently for different user agents.

<hr>

===result===
<code><nowiki><result name="resultName" defaultValue="value"> </result></nowiki></code>

A result may be a simple value, a list of simple values or a table of values. The details are described below in the <code>part</code> sub-tag. Several results may be defined in a WWSD. The user of a WWSD decides which result he wants to embed into an article.

The access to the result is defined with these attributes
* in an article that uses a web service the complete result can be accessed with the given '''name'''
* if no value is returned by the web service, the '''defaultValue''' will be applied. (However, the value will be decorated with an exclamation mark icon that indicates that the value may be outdated)

<hr>

====part====
'''<code><nowiki><part name="name of part" path="/a/b/c" xpath="/d/e"/></nowiki></code>

The result may be composed of several parts. 

* Every part of the result has a '''name''' that is unique within the result. It is used to access the part of the result and is displayed in the header of a column when the result is a table.
* The '''path''' specifies 
** for SOAP web services the exact location of the result in the result type hierarchy. The path has to be formulated in XPath syntax. In opposite to the path attribute for parameters, the complete XPath syntax is supported here. 
** for RESTful web services the path attribute is empty because those web services do not define complex result type hierarchies and simply return a string.
* The '''xpath''' attribute is optional. It can be used for extracting further data from a result part. This is useful for RESTful web services which often encode information via XML in the string they return as result to a web service call. The xpath-attribute can also be useful for some SOAP web services that also do not return complex result objects and that instead also use XML to encode their results. The path and the xpath attribute work together like follows: First the path attribute is evaluated. After that the xpath attribute is evaluated on the result returned by the evaluation of the path attribute. If XML-document which should be processed via the xpath-attribute defines a default namespace, then you have to use the namespace prefix <code>xmlns</code> whenever you address an element in the default-namespace. 
* The parts of the result can be accessed like this: <code>nameOfResult.nameOfPart</code>
** If a result of a WWSD consists of several parts, the complete result may become a table. Each part will be a column in the table. The name of the part is the name of the column in the tables header.

<hr>

===displayPolicy===
<code><nowiki><displayPolicy></displayPolicy></nowiki></code>

The display update policy determines how often the web service is accessed by the wiki for display purposes. When an article is requested by a user (and only then), the server checks if the values of web services have to be updated according to this policy. If so, the values are retrieved, stored in the database cache and displayed in the article. If the values do not need an update they are retrieved from the database. 

There are two policies: ''once'' and ''age''
;<code><nowiki><once/></nowiki></code>
:The web service is only accessed once. The result is stored in the database and from then on always used when an article needs the web service. This policy is normally used when the data provided by the web service does not change. However web services  provide an ''Update'' button on the special page Web Service Repository that allows to update the results of the web service. Subsequent applications of the web service from within articles recreate the cache with current values.

;<code><nowiki><maxAge value="1440"></maxAge ></nowiki></code>
:The data received from web services is stored in a database cache together with the time when the data was retrieved. A maximum age can be specified as display policy i.e. if the value in the database cache is not too old, the cache is used. Otherwise the web service is queried and the result is stored in the cache. If the web service is not available, the old value in the cache will prevail but it will be displayed with a warning.
:The value is specified in minutes e.g. 1440 (min) is one day.

'''Example'''
<pre>
<displayPolicy>
    <once />
</displayPolicy>
</pre>

<hr>

===queryPolicy===
<code><nowiki><queryPolicy></queryPolicy></nowiki></code>

Data from web services can be assigned to semantic properties in the wiki (e.g. <code><nowiki>[[property::{{#ws:weather|?temperature}}]]</nowiki></code>). The values of the properties are updated (according to the service's display update properties) when the article is viewed by a client. However this is not sufficient or reliable enough if the properties are used in inline queries as the values may not have been retrieved for all pages.

There will be a new gardening bot (the web service update bot) that updates the semantic properties that are fed by web services.

;<code><nowiki><once/></nowiki></code>
:Same as the <code><nowiki><once/></nowiki></code> display policy.   
;<code><nowiki><delay value="10"></maxAge ></nowiki></code>
:Some web services may not allow very fast subsequent calls. The delay in seconds defines a pause between each call of the web service while the update bot is running.
;<code><nowiki><maxAge value="10080"></maxAge ></nowiki></code>
:Same as the <code><nowiki><maxAge /></nowiki></code> display policy.

<hr>

===spanOfLife===
<code><nowiki><spanOfLife value="span of life in days" /></nowiki></code>

The cache for web service results should be kept as small as possible. Values that are likely to be never accessed again should be deleted. Consequently every value from a web service has a span of life (specified in days) that begins to expire after the last access or after the last update. After that period the value can be deleted by a cleanup bot. Values that are always valid have the span of life <code>forever</code>. However, this lifetime should be considered seriously and makes the most sense in combination with the update policy <code>once</code>.

Some licenses of web services prohibit that results are cached for a longer time. In this case the <code>spanOfLife</code> must be set to satisfy the license. The value starts to expire immediately after the update. The attribute <code>expiresAfterUpdate</code> must be set to <code>true</code>. If set to <code>false</code> or if omitted, the value starts to expire after the last access.

'''Example'''
<pre>
<spanOfLife value="90" expiresAfterUpdate="true"/>      <!-- Values expires 90 days after the update -->
<spanOfLife value="180"/>      <!-- Values expires 180 days after the last access -->
<spanOfLife value="forever" /> <!-- Values never expires -->
</pre>

<hr>

===Examples===

<pre>
<webservice name="Weather">
    <uri name="http://weather.example.com/weather.wsdl" />
    <protocol>SOAP</protocol>
    <method name="getTemperature" />
    <parameter name="zipCode" defaultValue="98101" optional="false" path="/cityWeather/zipCode" />
    <result name="temp">
        <part name="celsius" path="//cityWeather/temperature/celsius" />
        <part name="fahrenheit" path="//cityWeather/temperature/fahrenheit" />
    </result>
    <displayPolicy>
        <maxAge value="60"/>
    </displayPolicy>
    <queryPolicy>
        <maxAge value="1440"/>
    </queryPolicy>
    <spanOfLife value="180" />
</webservice>
</pre>

This WWSD defines the web service named ''Weather''. It accesses the operation ''getTemperature'' of the service that is defined at ''<nowiki>http://weather.example.com/weather.wsdl</nowiki>''. 

The operation gets the required parameter ''//cityWeather/zipCode'' that is aliased as ''zipCode'' with the default value ''98101''. 

The result is returned in a complex structure with the paths ''//cityWeather/temperature/celsius'' and ''//cityWeather/temperature/fahrenheit'', respectivley. When only the result ''temp'' is used in an article, a comma separated list of the temperature in celsius and fahrenheit is generated. However, the parts of the result can be accessed with ''temp.celsius'' and ''temp.fahrenheit''.

The display policy allows a maximum age of the values of 60 minutes. For queries it can be up to 1 day before the values have to be updated. Values will be kept in the cache for at least 180 days before they will be deleted by the cache cleanup bot.




<hr>
<b>Note &ndash;</b> Before you can use the web service, an administrator has to [[Web Services#The Web Service Repository|'''confirm''']] the WWSD you have defined.  
<hr>


Now you are able to embed web service calls into wiki articles. You can do that  [[Embedding_web_services_in_articles_manually |'''manually''']] or via the [[Embedding_web_services_in_articles_using_GUI |'''Use Web Service GUI''']]
While the web service is used, Administrators can take care about updating and 
caching of web service results by using the [[Web Services#Web Service cache cleanup bot|'''cache cleanup bot''']], 
the [[Web Services#Web Service update bot|'''update bot''']] and the special page [[Web Services#The Web Service Repository|''' Web Service Repository''']].

[[Category:SMW+ Help Topic|Web Service]]
[[SubsectionOf::Help:End User| ]]